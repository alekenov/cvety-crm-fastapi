#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –≤ Supabase
–£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ UF_FLORIST_SHOP –∏–∑ MySQL Bitrix
"""

import mysql.connector
from supabase import create_client
from config import config
import logging
from typing import List, Dict, Optional
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CVETYKZ_SHOP_UUID = "7f52091f-a6f1-4d23-a2c9-6754109065f4"
CVETYKZ_BITRIX_SHOP_ID = "17008"  # –≠—Ç–æ seller.ID = 2081, –Ω–æ UF_ID_SELLER = 17008
FLORIST_GROUP_ID = 7  # –§–ª–æ—Ä–∏—Å—Ç—ã
CHIEF_FLORIST_GROUP_ID = 13  # –ì–ª–∞–≤–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç

class FloristShopFixer:
    def __init__(self):
        self.mysql_connection = None
        self.supabase = create_client(config.SUPABASE_URL, config.SUPABASE_SERVICE_KEY)
        self.stats = {
            'total_florists': 0,
            'cvetykz_florists': 0,
            'other_shop_florists': 0,
            'updated_florists': 0,
            'errors': 0
        }
    
    def connect_mysql(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –±–∞–∑–µ"""
        try:
            self.mysql_connection = mysql.connector.connect(
                host='localhost',
                port=3306,
                user='root',
                password='cvety123',
                database='cvety_db',
                charset='utf8mb4',
                autocommit=True
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MySQL –±–∞–∑–µ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
            return False
    
    def get_florists_with_shops(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ —Å –∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –∏–∑ MySQL"""
        if not self.mysql_connection:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL")
            return []
        
        try:
            cursor = self.mysql_connection.cursor(dictionary=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ —Å –∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
            query = """
            SELECT 
                u.ID as bitrix_user_id,
                u.NAME,
                u.LAST_NAME,
                u.EMAIL,
                u.PERSONAL_MOBILE as PHONE,
                u.WORK_POSITION,
                u.ACTIVE,
                uts.UF_FLORIST_SHOP as florist_shop_id,
                s.UF_NAME as shop_name,
                s.UF_ID_SELLER as seller_id,
                GROUP_CONCAT(DISTINCT ug.GROUP_ID SEPARATOR ',') as GROUP_IDS,
                GROUP_CONCAT(DISTINCT g.NAME SEPARATOR ', ') as GROUP_NAMES,
                CASE 
                    WHEN MAX(CASE WHEN ug.GROUP_ID = %s THEN 1 ELSE 0 END) = 1 THEN '–ì–ª–∞–≤–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç'
                    WHEN MAX(CASE WHEN ug.GROUP_ID = %s THEN 1 ELSE 0 END) = 1 THEN '–§–ª–æ—Ä–∏—Å—Ç'
                    ELSE '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                END as PRIMARY_ROLE
            FROM b_user u 
            JOIN b_user_group ug ON u.ID = ug.USER_ID 
            JOIN b_group g ON ug.GROUP_ID = g.ID 
            JOIN b_uts_user uts ON u.ID = uts.VALUE_ID
            LEFT JOIN seller s ON uts.UF_FLORIST_SHOP = s.ID
            WHERE ug.GROUP_ID IN (%s, %s)
              AND uts.UF_FLORIST_SHOP IS NOT NULL
            GROUP BY u.ID, u.NAME, u.LAST_NAME, u.EMAIL, u.PERSONAL_MOBILE, u.WORK_POSITION, u.ACTIVE, 
                     uts.UF_FLORIST_SHOP, s.UF_NAME, s.UF_ID_SELLER
            ORDER BY u.ID
            """
            
            cursor.execute(query, (CHIEF_FLORIST_GROUP_ID, FLORIST_GROUP_ID, FLORIST_GROUP_ID, CHIEF_FLORIST_GROUP_ID))
            florists = cursor.fetchall()
            cursor.close()
            
            self.stats['total_florists'] = len(florists)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(florists)} —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –≤ MySQL")
            
            return florists
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤: {e}")
            return []
    
    def get_existing_user_by_bitrix_id(self, bitrix_id: str) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase –ø–æ bitrix_id"""
        try:
            result = self.supabase.table('users')\
                .select('*')\
                .filter('preferences->>bitrix_id', 'eq', bitrix_id)\
                .execute()
            
            return result.data[0] if result.data else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {bitrix_id}: {e}")
            return None
    
    def update_florist_shop_assignment(self, user_id: str, florist: Dict) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ preferences
            existing_user = self.supabase.table('users').select('preferences').eq('id', user_id).execute()
            if not existing_user.data:
                return False
                
            current_preferences = existing_user.data[0].get('preferences', {})
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π shop_id
            florist_shop_id = florist.get('florist_shop_id')
            seller_id = florist.get('seller_id')
            
            if str(florist_shop_id) == CVETYKZ_BITRIX_SHOP_ID:
                # –≠—Ç–æ —Ñ–ª–æ—Ä–∏—Å—Ç Cvetykz (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ UF_FLORIST_SHOP –Ω–∞–ø—Ä—è–º—É—é)
                shop_uuid = CVETYKZ_SHOP_UUID
                bitrix_shop_id = CVETYKZ_BITRIX_SHOP_ID
                self.stats['cvetykz_florists'] += 1
                logger.info(f"  ‚Üí Cvetykz —Ñ–ª–æ—Ä–∏—Å—Ç: {florist['NAME']} (florist_shop_id: {florist_shop_id})")
            else:
                # –§–ª–æ—Ä–∏—Å—Ç –¥—Ä—É–≥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π UUID –∏–ª–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–¥—Ä—É–≥–æ–π"
                shop_uuid = f"shop_{florist_shop_id}"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                bitrix_shop_id = str(florist_shop_id)
                self.stats['other_shop_florists'] += 1
                logger.info(f"  ‚Üí –î—Ä—É–≥–æ–π –º–∞–≥–∞–∑–∏–Ω: {florist['NAME']} (shop: {florist.get('shop_name', 'Unknown')}, florist_shop_id: {florist_shop_id})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º preferences
            new_preferences = {
                **current_preferences,
                'bitrix_id': str(florist['bitrix_user_id']),
                'shop_id': shop_uuid,
                'bitrix_shop_id': bitrix_shop_id,
                'florist_shop_id': florist_shop_id,
                'shop_name': florist.get('shop_name'),
                'is_florist': True,
                'florist_role': florist['PRIMARY_ROLE'],
                'bitrix_group_ids': [int(g) for g in florist['GROUP_IDS'].split(',') if g],
                'bitrix_groups': florist['GROUP_NAMES'],
                'work_position': florist.get('WORK_POSITION'),
                'is_active': florist.get('ACTIVE') == 'Y',
                'updated_at': datetime.now().isoformat()
            }
            
            result = self.supabase.table('users')\
                .update({'preferences': new_preferences})\
                .eq('id', user_id)\
                .execute()
            
            self.stats['updated_florists'] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞ {user_id}: {e}")
            self.stats['errors'] += 1
            return False
    
    def fix_florist_assignments(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MySQL
        if not self.connect_mysql():
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –∏–∑ MySQL
        florists = self.get_florists_with_shops()
        if not florists:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
        logger.info(f"üìã –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(florists)} —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
        for i, florist in enumerate(florists, 1):
            bitrix_id = str(florist['bitrix_user_id'])
            display_name = florist.get('NAME', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            
            logger.info(f"‚è≥ [{i}/{len(florists)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∞: {display_name} (Bitrix ID: {bitrix_id})")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
            existing_user = self.get_existing_user_by_bitrix_id(bitrix_id)
            if existing_user:
                self.update_florist_shop_assignment(existing_user['id'], florist)
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Bitrix ID {bitrix_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if i % 20 == 0:
                logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(florists)} - Cvetykz: {self.stats['cvetykz_florists']}, –î—Ä—É–≥–∏–µ: {self.stats['other_shop_florists']}, –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("=" * 60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        logger.info(f"   –í—Å–µ–≥–æ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['total_florists']}")
        logger.info(f"   –§–ª–æ—Ä–∏—Å—Ç–æ–≤ Cvetykz: {self.stats['cvetykz_florists']}")
        logger.info(f"   –§–ª–æ—Ä–∏—Å—Ç–æ–≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {self.stats['other_shop_florists']}")
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.stats['updated_florists']}")
        logger.info(f"   –û—à–∏–±–æ–∫: {self.stats['errors']}")
        logger.info("=" * 60)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL
        if self.mysql_connection:
            self.mysql_connection.close()
        
        logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True

if __name__ == "__main__":
    fixer = FloristShopFixer()
    fixer.fix_florist_assignments()