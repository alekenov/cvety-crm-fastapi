#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥–∞—Ç–∞–º–∏
–ù–∞—Ö–æ–¥–∏—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ —Ç–∏–ø–∞ 'date/time field value out of range'
"""

import os
import sys
import json
from datetime import datetime
from supabase import create_client
from transformers.order_transformer import OrderTransformer
from webhook_handler import WebhookHandler
from telegram_notifier import send_sync_result_notification
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY")

class SyncErrorFixer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        if not SUPABASE_URL or not SUPABASE_SERVICE_KEY:
            raise ValueError("Supabase credentials not found in environment")
        
        self.supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        self.transformer = OrderTransformer()
        
    def get_date_errors(self, limit: int = 50):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç–∞–º–∏
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ —Å –¥–∞—Ç–∞–º–∏
        """
        try:
            # –ò—â–µ–º –æ—à–∏–±–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –≤ sync_log
            result = self.supabase.table('sync_log')\
                .select('*')\
                .eq('status', 'error')\
                .like('error_message', '%date/time field value out of range%')\
                .order('created_at', desc=True)\
                .limit(limit)\
                .execute()
            
            return result.data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫: {e}")
            return []
    
    def extract_bitrix_id_from_error(self, error_log: dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Bitrix ID –∏–∑ –ª–æ–≥–∞ –æ—à–∏–±–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º bitrix_id –≤ –ª–æ–≥–µ
            if error_log.get('bitrix_id'):
                return str(error_log['bitrix_id'])
            
            # –ò—â–µ–º –≤ payload
            payload = error_log.get('payload', {})
            if payload:
                return str(payload.get('order_id') or payload.get('ID', ''))
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Bitrix ID –∏–∑ –æ—à–∏–±–∫–∏: {e}")
            return None
    
    def fix_order_dates(self, bitrix_order_data: dict) -> dict:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        
        Args:
            bitrix_order_data: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ Bitrix
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        """
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
            fixed_order = self.transformer.transform_bitrix_to_supabase(bitrix_order_data)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
            date_fields = ['created_at', 'updated_at', 'delivery_date']
            for field in date_fields:
                if field in fixed_order and fixed_order[field]:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
                        if isinstance(fixed_order[field], str):
                            test_date = datetime.fromisoformat(fixed_order[field].replace('Z', '+00:00'))
                            
                            # –î–ª—è delivery_date –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                            if field == 'delivery_date':
                                fixed_order[field] = test_date.date().isoformat()
                            else:
                                fixed_order[field] = test_date.isoformat()
                                
                    except (ValueError, TypeError):
                        print(f"‚ö†Ô∏è  –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É {field}: {fixed_order[field]}")
                        if field == 'delivery_date':
                            fixed_order[field] = None
                        else:
                            fixed_order[field] = datetime.now().isoformat()
            
            return fixed_order
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç: {e}")
            return None
    
    async def retry_failed_sync(self, error_log: dict) -> bool:
        """
        –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        
        Args:
            error_log: –õ–æ–≥ –æ—à–∏–±–∫–∏ –∏–∑ sync_log
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            payload = error_log.get('payload', {})
            if not payload:
                print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return False
            
            bitrix_order_id = self.extract_bitrix_id_from_error(error_log)
            if not bitrix_order_id:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Bitrix Order ID")
                return False
            
            print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞ {bitrix_order_id}...")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            fixed_order = self.fix_order_dates(payload)
            if not fixed_order:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –≤ Supabase
            existing_order = self.supabase.table('orders')\
                .select('id')\
                .eq('bitrix_order_id', int(bitrix_order_id))\
                .execute()
            
            if existing_order.data:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
                result = self.supabase.table('orders')\
                    .update(fixed_order)\
                    .eq('bitrix_order_id', int(bitrix_order_id))\
                    .execute()
                
                action = 'fix_update'
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                result = self.supabase.table('orders').insert(fixed_order).execute()
                action = 'fix_create'
            
            if result.data:
                print(f"‚úÖ –ó–∞–∫–∞–∑ {bitrix_order_id} —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω ({action})")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                self.supabase.table('sync_log').insert({
                    'action': f'{action}_success',
                    'direction': 'error_fix',
                    'bitrix_id': bitrix_order_id,
                    'status': 'success',
                    'payload': payload,
                    'created_at': datetime.now().isoformat()
                }).execute()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await send_sync_result_notification(
                    order_data=payload,
                    status='success',
                    action=f'error_fix_{action}'
                )
                
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ {bitrix_order_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def fix_all_date_errors(self, max_errors: int = 20, dry_run: bool = False):
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—à–∏–±–∫–∏ —Å –¥–∞—Ç–∞–º–∏
        
        Args:
            max_errors: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        print(f"üîç –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ —Å –¥–∞—Ç–∞–º–∏ (–ª–∏–º–∏—Ç: {max_errors})...")
        
        date_errors = self.get_date_errors(max_errors)
        if not date_errors:
            print("‚úÖ –û—à–∏–±–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(date_errors)} –æ—à–∏–±–æ–∫ —Å –¥–∞—Ç–∞–º–∏")
        
        if dry_run:
            print("\nüîç DRY RUN - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
            for i, error in enumerate(date_errors, 1):
                bitrix_id = self.extract_bitrix_id_from_error(error)
                error_msg = error.get('error_message', '')[:100]
                created_at = error.get('created_at', '')[:19]
                print(f"  {i}. –ó–∞–∫–∞–∑ {bitrix_id} | {created_at} | {error_msg}...")
            return
        
        fixed_count = 0
        failed_count = 0
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(date_errors)} –æ—à–∏–±–æ–∫...")
        
        for i, error in enumerate(date_errors, 1):
            bitrix_id = self.extract_bitrix_id_from_error(error)
            print(f"\n[{i}/{len(date_errors)}] –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ {bitrix_id}...")
            
            try:
                if await self.retry_failed_sync(error):
                    fixed_count += 1
                else:
                    failed_count += 1
                    
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {bitrix_id}: {e}")
                failed_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {failed_count}")
        print(f"üìà Success rate: {(fixed_count / len(date_errors) * 100):.1f}%")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ Telegram
        try:
            summary_data = {
                'order_number': 'BATCH_FIX',
                'total_amount': 0
            }
            await send_sync_result_notification(
                order_data=summary_data,
                status='success',
                action=f'batch_fix_{fixed_count}_of_{len(date_errors)}'
            )
        except:
            pass


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß Fix Sync Errors - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç")
    print("=" * 60)
    
    try:
        fixer = SyncErrorFixer()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        dry_run = '--dry-run' in sys.argv
        max_errors = 20
        
        if '--max' in sys.argv:
            try:
                max_idx = sys.argv.index('--max')
                max_errors = int(sys.argv[max_idx + 1])
            except (ValueError, IndexError):
                print("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç --max, –∏—Å–ø–æ–ª—å–∑—É–µ–º 20")
        
        await fixer.fix_all_date_errors(max_errors, dry_run)
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("\nüöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python3 fix_sync_errors.py                 # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–æ 20 –æ—à–∏–±–æ–∫")
    print("  python3 fix_sync_errors.py --max 50        # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–æ 50 –æ—à–∏–±–æ–∫")
    print("  python3 fix_sync_errors.py --dry-run       # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
    print("")
    
    asyncio.run(main())