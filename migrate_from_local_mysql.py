#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π MySQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Python CRM —á–µ—Ä–µ–∑ webhook
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""

import pymysql
import requests
import json
from datetime import datetime
import time
import sys
from typing import Dict, List, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MYSQL_CONFIG = {
    'host': 'localhost',
    'port': 3306,
    'user': 'root',
    'password': 'cvety123',
    'database': 'cvety_db',
    'charset': 'utf8mb4'
}

WEBHOOK_CONFIG = {
    'url': 'http://localhost:8001/api/webhooks/bitrix/order',
    'token': 'secret-webhook-token-2024',
    'timeout': 30
}

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
GREEN = '\033[92m'
RED = '\033[91m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
MAGENTA = '\033[95m'
RESET = '\033[0m'

class LocalMySQLMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π MySQL –≤ Python CRM"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL"""
        try:
            self.connection = pymysql.connect(**MYSQL_CONFIG)
            self.cursor = self.connection.cursor(pymysql.cursors.DictCursor)
            print(f"{GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MySQL –Ω–∞ localhost:3306{RESET}")
            self._check_database_stats()
        except Exception as e:
            print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}{RESET}")
            sys.exit(1)
    
    def _check_database_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            self.cursor.execute("SELECT COUNT(*) as total FROM b_sale_order")
            total = self.cursor.fetchone()['total']
            
            # –ó–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            self.cursor.execute("""
                SELECT COUNT(*) as recent 
                FROM b_sale_order 
                WHERE DATE_INSERT >= DATE_SUB(NOW(), INTERVAL 30 DAY)
            """)
            recent = self.cursor.fetchone()['recent']
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
            self.cursor.execute("""
                SELECT ID, DATE_INSERT 
                FROM b_sale_order 
                ORDER BY ID DESC 
                LIMIT 1
            """)
            last_order = self.cursor.fetchone()
            
            print(f"\n{BLUE}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:{RESET}")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total:,}")
            print(f"  ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {recent:,}")
            print(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: ID {last_order['ID']} –æ—Ç {last_order['DATE_INSERT']}")
            print("")
            
        except Exception as e:
            print(f"{YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}{RESET}")
    
    def get_orders(self, limit: int = 10, offset: int = 0, start_id: Optional[int] = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∏–∑ MySQL —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ
            start_id: ID –∑–∞–∫–∞–∑–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å (–¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
        """
        try:
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤
            if start_id:
                query = """
                    SELECT 
                        o.ID,
                        o.ACCOUNT_NUMBER,
                        o.STATUS_ID,
                        o.PRICE,
                        o.CURRENCY,
                        o.USER_ID,
                        o.PAY_SYSTEM_ID,
                        o.PAYED,
                        o.DATE_PAYED,
                        o.PRICE_DELIVERY,
                        o.ALLOW_DELIVERY,
                        o.DATE_ALLOW_DELIVERY,
                        o.DISCOUNT_VALUE,
                        o.TAX_VALUE,
                        o.USER_DESCRIPTION,
                        o.COMMENTS,
                        o.RESPONSIBLE_ID,
                        o.DATE_INSERT,
                        o.DATE_UPDATE
                    FROM b_sale_order o
                    WHERE o.ID > %s
                    ORDER BY o.ID
                    LIMIT %s
                """
                self.cursor.execute(query, (start_id, limit))
            else:
                query = """
                    SELECT 
                        o.ID,
                        o.ACCOUNT_NUMBER,
                        o.STATUS_ID,
                        o.PRICE,
                        o.CURRENCY,
                        o.USER_ID,
                        o.PAY_SYSTEM_ID,
                        o.PAYED,
                        o.DATE_PAYED,
                        o.PRICE_DELIVERY,
                        o.ALLOW_DELIVERY,
                        o.DATE_ALLOW_DELIVERY,
                        o.DISCOUNT_VALUE,
                        o.TAX_VALUE,
                        o.USER_DESCRIPTION,
                        o.COMMENTS,
                        o.RESPONSIBLE_ID,
                        o.DATE_INSERT,
                        o.DATE_UPDATE
                    FROM b_sale_order o
                    ORDER BY o.ID DESC
                    LIMIT %s OFFSET %s
                """
                self.cursor.execute(query, (limit, offset))
            
            orders = self.cursor.fetchall()
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for order in orders:
                order_id = order['ID']
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
                order['basket'] = self._get_order_basket(order_id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞
                order['properties'] = self._get_order_properties(order_id)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
                for key, value in order.items():
                    if isinstance(value, datetime):
                        order[key] = value.strftime('%Y-%m-%d %H:%M:%S')
            
            return orders
            
        except Exception as e:
            print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}{RESET}")
            return []
    
    def _get_order_basket(self, order_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ"""
        try:
            query = """
                SELECT 
                    ID,
                    PRODUCT_ID,
                    PRODUCT_PRICE_ID,
                    NAME,
                    PRICE,
                    CURRENCY,
                    QUANTITY,
                    LID,
                    PRODUCT_XML_ID,
                    DISCOUNT_PRICE,
                    DISCOUNT_VALUE,
                    VAT_RATE,
                    SUBSCRIBE,
                    RESERVED,
                    BARCODE_MULTI,
                    CUSTOM_PRICE,
                    DETAIL_PAGE_URL,
                    CATALOG_XML_ID,
                    PRODUCT_PROVIDER_CLASS,
                    TYPE,
                    SET_PARENT_ID
                FROM b_sale_basket
                WHERE ORDER_ID = %s
            """
            self.cursor.execute(query, (order_id,))
            basket_items = self.cursor.fetchall()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ float –¥–ª—è JSON
            for item in basket_items:
                for key, value in item.items():
                    if hasattr(value, 'real'):  # –≠—Ç–æ Decimal
                        item[key] = str(value)
                    elif isinstance(value, datetime):
                        item[key] = value.strftime('%Y-%m-%d %H:%M:%S')
            
            return basket_items
            
        except Exception as e:
            print(f"{YELLOW}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}{RESET}")
            return []
    
    def _get_order_properties(self, order_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            query = """
                SELECT 
                    p.CODE,
                    v.VALUE
                FROM b_sale_order_props_value v
                JOIN b_sale_order_props p ON v.ORDER_PROPS_ID = p.ID
                WHERE v.ORDER_ID = %s
            """
            self.cursor.execute(query, (order_id,))
            props = self.cursor.fetchall()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å {CODE: VALUE}
            properties = {}
            for prop in props:
                if prop['CODE'] and prop['VALUE']:
                    # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ —Å–≤–æ–π—Å—Ç–≤ –Ω–∞ –Ω–∞—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
                    code_map = {
                        'FIO': 'nameRecipient',
                        'PHONE': 'phoneRecipient',
                        'ADDRESS': 'addressRecipient',
                        'CITY': 'city',
                        'LOCATION': 'location',
                        'ZIP': 'zip',
                        'EMAIL': 'email',
                        'CONTACT_PERSON': 'contactPerson',
                        'DELIVERY_DATE': 'data',
                        'DELIVERY_TIME': 'when',
                        'POSTCARD_TEXT': 'postcardText',
                        'USER_DESCRIPTION': 'notes'
                    }
                    
                    mapped_code = code_map.get(prop['CODE'], prop['CODE'])
                    properties[mapped_code] = prop['VALUE']
            
            return properties
            
        except Exception as e:
            print(f"{YELLOW}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}{RESET}")
            return {}
    
    def send_order_to_webhook(self, order: Dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ webhook –≤ Python CRM
        
        Args:
            order: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ MySQL
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç webhook
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            webhook_data = {
                'ID': order['ID'],
                'order_id': order['ID'],
                'ACCOUNT_NUMBER': order['ACCOUNT_NUMBER'],
                'STATUS_ID': order['STATUS_ID'],
                'PRICE': str(order['PRICE']) if order['PRICE'] else '0',
                'PRICE_DELIVERY': str(order['PRICE_DELIVERY']) if order['PRICE_DELIVERY'] else '0',
                'DISCOUNT_VALUE': str(order['DISCOUNT_VALUE']) if order['DISCOUNT_VALUE'] else '0',
                'USER_ID': order['USER_ID'],
                'DATE_INSERT': order['DATE_INSERT'],
                'USER_DESCRIPTION': order['USER_DESCRIPTION'],
                'COMMENTS': order['COMMENTS'],
                'PAYED': order['PAYED'],
                'PAY_SYSTEM_ID': order['PAY_SYSTEM_ID'],
                'basket': order.get('basket', []),
                'properties': order.get('properties', {})
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook
            headers = {
                'Content-Type': 'application/json',
                'X-Webhook-Token': WEBHOOK_CONFIG['token']
            }
            
            response = requests.post(
                WEBHOOK_CONFIG['url'],
                json=webhook_data,
                headers=headers,
                timeout=WEBHOOK_CONFIG['timeout']
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"{GREEN}‚úÖ –ó–∞–∫–∞–∑ {order['ID']}: {result.get('action', 'success')}{RESET}")
                return True
            else:
                print(f"{RED}‚ùå –ó–∞–∫–∞–∑ {order['ID']}: HTTP {response.status_code}{RESET}")
                if response.text:
                    print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
                return False
                
        except Exception as e:
            print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {order.get('ID', '?')}: {e}{RESET}")
            return False
    
    def migrate_orders(self, count: int = 10, start_id: Optional[int] = None, delay: float = 0.5):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            start_id: ID —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        """
        print(f"\n{BLUE}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é {count} –∑–∞–∫–∞–∑–æ–≤{RESET}")
        if start_id:
            print(f"   –ù–∞—á–∏–Ω–∞—è —Å ID > {start_id}")
        print("")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
        orders = self.get_orders(limit=count, start_id=start_id)
        
        if not orders:
            print(f"{YELLOW}‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏{RESET}")
            return
        
        print(f"{MAGENTA}üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ MySQL{RESET}")
        print(f"   ID range: {orders[-1]['ID']} - {orders[0]['ID']}")
        print("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = 0
        error_count = 0
        last_id = 0
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
        for i, order in enumerate(orders, 1):
            print(f"\n{BLUE}[{i}/{len(orders)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ {order['ID']}{RESET}")
            print(f"  ‚Ä¢ –î–∞—Ç–∞: {order['DATE_INSERT']}")
            print(f"  ‚Ä¢ –°—É–º–º–∞: {order['PRICE']} {order.get('CURRENCY', 'KZT')}")
            print(f"  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {len(order.get('basket', []))}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ webhook
            if self.send_order_to_webhook(order):
                success_count += 1
            else:
                error_count += 1
            
            last_id = order['ID']
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(orders):
                time.sleep(delay)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{BLUE}{'='*60}{RESET}")
        print(f"{BLUE}üìä –ò–¢–û–ì–ò –ú–ò–ì–†–ê–¶–ò–ò{RESET}")
        print(f"{BLUE}{'='*60}{RESET}")
        print(f"  {GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}{RESET}")
        if error_count > 0:
            print(f"  {RED}‚ùå –û—à–∏–±–æ–∫: {error_count}{RESET}")
        print(f"  üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_id}")
        print(f"\nüí° –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --start-id {last_id}")
        print(f"{BLUE}{'='*60}{RESET}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoint
        self._save_checkpoint(last_id, success_count, error_count)
    
    def _save_checkpoint(self, last_id: int, success: int, errors: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ—á–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
        checkpoint = {
            'last_id': last_id,
            'success_count': success,
            'error_count': errors,
            'timestamp': datetime.now().isoformat()
        }
        
        try:
            with open('migration_checkpoint.json', 'w') as f:
                json.dump(checkpoint, f, indent=2)
            print(f"\nüíæ Checkpoint —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ migration_checkpoint.json")
        except Exception as e:
            print(f"{YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å checkpoint: {e}{RESET}")
    
    def get_order_details(self, order_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
        print(f"\n{BLUE}üîç –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {order_id}:{RESET}\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        self.cursor.execute("SELECT * FROM b_sale_order WHERE ID = %s", (order_id,))
        order = self.cursor.fetchone()
        
        if not order:
            print(f"{RED}‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω{RESET}")
            return
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"{GREEN}üìã –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:{RESET}")
        print(f"  ‚Ä¢ ID: {order['ID']}")
        print(f"  ‚Ä¢ –ù–æ–º–µ—Ä: {order['ACCOUNT_NUMBER']}")
        print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {order['STATUS_ID']}")
        print(f"  ‚Ä¢ –°—É–º–º–∞: {order['PRICE']} {order['CURRENCY']}")
        print(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['USER_ID']}")
        print(f"  ‚Ä¢ –î–∞—Ç–∞: {order['DATE_INSERT']}")
        
        # –¢–æ–≤–∞—Ä—ã
        basket = self._get_order_basket(order_id)
        if basket:
            print(f"\n{GREEN}üõí –¢–æ–≤–∞—Ä—ã ({len(basket)} —à—Ç):{RESET}")
            for item in basket:
                print(f"  ‚Ä¢ {item['NAME']}")
                print(f"    –¶–µ–Ω–∞: {item['PRICE']} x {item['QUANTITY']} = {float(item['PRICE']) * float(item['QUANTITY'])}")
        
        # –°–≤–æ–π—Å—Ç–≤–∞
        props = self._get_order_properties(order_id)
        if props:
            print(f"\n{GREEN}üìù –°–≤–æ–π—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞:{RESET}")
            for key, value in props.items():
                if value:
                    print(f"  ‚Ä¢ {key}: {value}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            print(f"\n{GREEN}‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ{RESET}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ MySQL –≤ Python CRM')
    parser.add_argument('--count', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)')
    parser.add_argument('--start-id', type=int, help='ID –∑–∞–∫–∞–∑–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å')
    parser.add_argument('--delay', type=float, default=0.5, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--details', type=int, help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
    migrator = LocalMySQLMigrator()
    
    try:
        if args.details:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
            migrator.get_order_details(args.details)
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            migrator.migrate_orders(
                count=args.count,
                start_id=args.start_id,
                delay=args.delay
            )
    finally:
        migrator.close()

if __name__ == "__main__":
    main()