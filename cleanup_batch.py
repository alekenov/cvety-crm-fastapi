#!/usr/bin/env python3
"""
Batch cleanup script - runs automatically without confirmation
Cleans up old orders with 'new' status in batches
"""

import os
import sys
from datetime import datetime, timedelta
from supabase import create_client, Client
from config import config as app_config

def get_supabase() -> Client:
    """Get Supabase client"""
    url = app_config.SUPABASE_URL
    key = app_config.SUPABASE_ANON_KEY
    return create_client(url, key)

def cleanup_old_new_orders_batch():
    """
    Automatically clean up old orders with 'new' status
    """
    db = get_supabase()
    
    # Date 30 days ago
    thirty_days_ago = datetime.now() - timedelta(days=30)
    cutoff_date = thirty_days_ago.isoformat()
    
    print(f"üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' —Å—Ç–∞—Ä—à–µ {thirty_days_ago.strftime('%Y-%m-%d')}...")
    
    # Find all old orders with 'new' status - limit to 1000 per batch
    result = db.table('orders')\
        .select('id, order_number, status, created_at, total_amount')\
        .eq('status', 'new')\
        .lt('created_at', cutoff_date)\
        .limit(1000)\
        .execute()
    
    if not result.data:
        print("‚úÖ –ë–æ–ª—å—à–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 0
    
    old_orders = result.data
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(old_orders)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'")
    
    # Show first 5 for example
    print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    for order in old_orders[:5]:
        order_num = order.get('order_number', f"Order #{order['id'][:8]}")
        created = order.get('created_at', 'Unknown')[:10]
        amount = order.get('total_amount', 0)
        print(f"  ‚Ä¢ {order_num} - {created} - {amount}‚Ç∏")
    
    if len(old_orders) > 5:
        print(f"  ... –∏ –µ—â–µ {len(old_orders) - 5} –∑–∞–∫–∞–∑–æ–≤")
    
    # Update orders in batches of 100
    batch_size = 100
    updated_count = 0
    
    print(f"\nüöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: {len(old_orders)} –∑–∞–∫–∞–∑–æ–≤ —Å 'new' ‚Üí 'completed'")
    
    for i in range(0, len(old_orders), batch_size):
        batch = old_orders[i:i + batch_size]
        order_ids = [order['id'] for order in batch]
        
        print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1} ({len(batch)} –∑–∞–∫–∞–∑–æ–≤)...")
        
        try:
            update_result = db.table('orders')\
                .update({'status': 'completed'})\
                .in_('id', order_ids)\
                .execute()
            
            if update_result.data:
                updated_count += len(update_result.data)
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(update_result.data)} –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ")
            else:
                print(f"‚ö†Ô∏è  –ü–∞–∫–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞: {e}")
            continue
    
    print(f"\nüéâ –ó–ê–í–ï–†–®–ï–ù–û! –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–∫–∞–∑–æ–≤ —Å 'new' ‚Üí 'completed'")
    return updated_count

def show_status_stats():
    """Show current status statistics"""
    db = get_supabase()
    
    print("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤:")
    
    result = db.table('orders')\
        .select('status')\
        .execute()
    
    if result.data:
        status_counts = {}
        for order in result.data:
            status = order['status']
            status_counts[status] = status_counts.get(status, 0) + 1
        
        # Sort by count
        sorted_statuses = sorted(status_counts.items(), key=lambda x: x[1], reverse=True)
        
        for status, count in sorted_statuses:
            print(f"  {status}: {count:,} –∑–∞–∫–∞–∑–æ–≤")
        
        print(f"\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(result.data):,}")

if __name__ == "__main__":
    print("üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    print("=" * 50)
    
    # Show current stats
    show_status_stats()
    
    print("\n" + "=" * 50)
    
    # Run cleanup in batches until no more old orders
    total_cleaned = 0
    batch_num = 1
    
    while True:
        print(f"\nüîÑ –ü–ê–ö–ï–¢ #{batch_num}")
        cleaned = cleanup_old_new_orders_batch()
        
        if cleaned == 0:
            break
            
        total_cleaned += cleaned
        batch_num += 1
        
        # Safety limit - don't clean more than 10,000 orders at once
        if total_cleaned >= 10000:
            print(f"\n‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {total_cleaned} –∑–∞–∫–∞–∑–æ–≤")
            break
    
    print(f"\nüèÅ –û–ë–©–ò–ô –ò–¢–û–ì: –û—á–∏—â–µ–Ω–æ {total_cleaned} —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    
    # Show final stats
    print("\n" + "=" * 50)
    show_status_stats()