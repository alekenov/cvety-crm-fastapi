#!/usr/bin/env python3
"""
Telegram Notifier –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import logging
from datetime import datetime
from typing import List, Dict, Any, Optional
import aiohttp
from supabase import create_client
from config import config

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    # –ü–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–¥–∞–∫—à–Ω—É)
    STATUS_DESCRIPTIONS = {
        # Supabase —Å—Ç–∞—Ç—É—Å—ã
        'new': 'üÜï –ù–æ–≤—ã–π',
        'unrealized': '‚ùå –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω',
        'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', 
        'paid': 'üí≥ –û–ø–ª–∞—á–µ–Ω',
        'assembled': 'üì¶ –°–æ–±—Ä–∞–Ω',
        'ready_delivery': 'üöö –ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ',
        'ready_pickup': 'üè™ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
        'in_transit': 'üöÄ –í –ø—É—Ç–∏',
        'shipped': 'üì§ –û—Ç–≥—Ä—É–∂–µ–Ω',
        'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω',
        'refunded': 'üí∞ –í–æ–∑–≤—Ä–∞—Ç',
        'unpaid': 'üíî –ù–µ –æ–ø–ª–∞—á–µ–Ω',
        'payment_error': '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
        'problematic': 'üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–π',
        'reassemble': 'üîÑ –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å',
        'waiting_processing': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        'waiting_approval': 'ü§î –ñ–¥–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è',
        'waiting_group_buy': 'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
        'auction': 'üî® –ê—É–∫—Ü–∏–æ–Ω',
        'decide': 'üéØ –†–µ—à–∏—Ç—å',
        # Kaspi —Å—Ç–∞—Ç—É—Å—ã
        'kaspi_waiting_qr': 'üì± Kaspi: –∂–¥–µ–º QR',
        'kaspi_qr_scanned': 'üì≤ Kaspi: QR –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω',
        'kaspi_paid': 'üí≥ Kaspi: –æ–ø–ª–∞—á–µ–Ω',
        'kaspi_payment_error': '‚ö†Ô∏è Kaspi: –æ—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
        # Cloudpayments —Å—Ç–∞—Ç—É—Å—ã
        'cloudpay_authorized': 'üîê CloudPay: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        'cloudpay_confirmed': '‚úÖ CloudPay: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'cloudpay_canceled': '‚ùå CloudPay: –æ—Ç–º–µ–Ω–µ–Ω',
        'cloudpay_refunded': 'üí∞ CloudPay: –≤–æ–∑–≤—Ä–∞—Ç',
        
        # Bitrix —Å—Ç–∞—Ç—É—Å—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        'N': 'üÜï –ù–æ–≤—ã–π',
        'UN': '‚ùå –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω',
        'AP': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'PD': 'üí≥ –û–ø–ª–∞—á–µ–Ω',
        'CO': 'üì¶ –°–æ–±—Ä–∞–Ω',
        'RD': 'üöö –ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ',
        'RP': 'üè™ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
        'DE': 'üöÄ –í –ø—É—Ç–∏',
        'DF': 'üì§ –û—Ç–≥—Ä—É–∂–µ–Ω',
        'F': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω',
        'RF': 'üí∞ –í–æ–∑–≤—Ä–∞—Ç',
        'CF': 'üíî –ù–µ –æ–ø–ª–∞—á–µ–Ω',
        'ER': '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
        'TR': 'üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–π',
        'RO': 'üîÑ –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å',
        'DN': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        'WA': 'ü§î –ñ–¥–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è',
        'GP': 'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
        'AN': 'üî® –ê—É–∫—Ü–∏–æ–Ω',
        'CA': 'üéØ –†–µ—à–∏—Ç—å',
        'KA': 'üì± Kaspi: –∂–¥–µ–º QR',
        'KB': 'üì≤ Kaspi: QR –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω',
        'KC': 'üí≥ Kaspi: –æ–ø–ª–∞—á–µ–Ω',
        'KD': '‚ö†Ô∏è Kaspi: –æ—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
        'AU': 'üîê CloudPay: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        'CP': '‚úÖ CloudPay: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'AR': '‚ùå CloudPay: –æ—Ç–º–µ–Ω–µ–Ω',
        'RR': 'üí∞ CloudPay: –≤–æ–∑–≤—Ä–∞—Ç'
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ ID (–æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∫—à–Ω–∞)
    CITY_NAMES = {
        1: '–ê–ª–º–∞—Ç—ã',         # –°—Ç–∞—Ä—ã–π ID –ê–ª–º–∞—Ç—ã
        2: '–ê—Å—Ç–∞–Ω–∞',         # ID –ê—Å—Ç–∞–Ω—ã
        357: '–ê–ª–º–∞—Ç—ã',       # –†–µ–∞–ª—å–Ω—ã–π ID –ê–ª–º–∞—Ç—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
        390: '–ö–æ—Å—Ç–∞–Ω–∞–π',     # ID –ö–æ—Å—Ç–∞–Ω–∞—è
        402: '–†—É–¥–Ω—ã–π',       # ID –†—É–¥–Ω–æ–≥–æ
        420: '–£—Ä–∞–ª—å—Å–∫',      # ID –£—Ä–∞–ª—å—Å–∫–∞
        421: '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫',  # ID –£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫–∞
        # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏
        '1': '–ê–ª–º–∞—Ç—ã',
        '2': '–ê—Å—Ç–∞–Ω–∞', 
        '357': '–ê–ª–º–∞—Ç—ã',
        '390': '–ö–æ—Å—Ç–∞–Ω–∞–π',
        '402': '–†—É–¥–Ω—ã–π',
        '420': '–£—Ä–∞–ª—å—Å–∫',
        '421': '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫'
    }
    
    def __init__(self):
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else None
        self.supabase = None
        
        if config.SUPABASE_URL and config.SUPABASE_ANON_KEY:
            self.supabase = create_client(config.SUPABASE_URL, config.SUPABASE_ANON_KEY)
        
        self._session = None
    
    async def _get_session(self):
        """–ü–æ–ª—É—á–∏—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if self._session is None:
            self._session = aiohttp.ClientSession()
        return self._session
    
    async def _get_active_users(self, notification_level: str = 'all') -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.supabase:
            return []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if notification_level == 'admin_only':
                query = self.supabase.table('telegram_users')\
                    .select('chat_id, username, first_name, role, notification_level')\
                    .eq('is_active', True)\
                    .eq('role', 'admin')
            elif notification_level == 'errors_only':
                query = self.supabase.table('telegram_users')\
                    .select('chat_id, username, first_name, role, notification_level')\
                    .eq('is_active', True)\
                    .in_('notification_level', ['all', 'errors_only'])
            else:
                query = self.supabase.table('telegram_users')\
                    .select('chat_id, username, first_name, role, notification_level')\
                    .eq('is_active', True)
            
            result = query.execute()
            return result.data if result.data else []
            
        except Exception as e:
            logger.error(f"Error getting active users: {e}")
            return []
    
    async def _send_message(self, chat_id: int, text: str, parse_mode: str = 'HTML') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç"""
        if not self.base_url:
            logger.error("Bot token not configured")
            return False
        
        try:
            session = await self._get_session()
            
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            
            async with session.post(f"{self.base_url}/sendMessage", data=data) as response:
                if response.status == 200:
                    return True
                elif response.status == 403:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                    await self._deactivate_user(chat_id)
                    logger.warning(f"User {chat_id} blocked the bot, deactivating")
                    return False
                else:
                    response_text = await response.text()
                    logger.error(f"Failed to send message to {chat_id}: {response.status} - {response_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"Error sending message to {chat_id}: {e}")
            return False
    
    async def _deactivate_user(self, chat_id: int):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)"""
        if not self.supabase:
            return
        
        try:
            self.supabase.table('telegram_users')\
                .update({'is_active': False})\
                .eq('chat_id', chat_id)\
                .execute()
        except Exception as e:
            logger.error(f"Error deactivating user {chat_id}: {e}")
    
    def get_status_description(self, status):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —ç–º–æ–¥–∑–∏"""
        if not status:
            return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        description = self.STATUS_DESCRIPTIONS.get(status)
        if description:
            return description
            
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        return f'‚ùì {status}'
    
    def get_city_name(self, city_value):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
        if not city_value:
            return '–ù–µ —É–∫–∞–∑–∞–Ω'
            
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
        if isinstance(city_value, str) and len(city_value) > 3:
            if any(city_name in city_value for city_name in ['–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–ö–æ—Å—Ç–∞–Ω–∞–π', '–†—É–¥–Ω—ã–π', '–£—Ä–∞–ª—å—Å–∫', '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫']):
                return city_value
        
        # –ï—Å–ª–∏ —ç—Ç–æ ID –≥–æ—Ä–æ–¥–∞
        city_id = None
        try:
            city_id = int(city_value) if city_value else None
        except (ValueError, TypeError):
            pass
            
        if city_id:
            return self.CITY_NAMES.get(city_id, f'–ì–æ—Ä–æ–¥ ID {city_id}')
            
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–ª—é—á—É
        return self.CITY_NAMES.get(str(city_value), str(city_value) if city_value else '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    def format_order_notification(self, order_data: Dict[str, Any], action: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ Supabase
        order_number = order_data.get('order_number', order_data.get('bitrix_order_id', 'N/A'))
        customer_phone = order_data.get('recipient_phone', '')
        total_amount = order_data.get('total_amount', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        city_name = '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ bitrix_city_id
        bitrix_city_id = order_data.get('bitrix_city_id')
        if bitrix_city_id:
            city_name = self.get_city_name(bitrix_city_id)
        
        # 2. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∏–∑ bitrix_data (–∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        if city_name == '–ù–µ —É–∫–∞–∑–∞–Ω' and order_data.get('bitrix_data', {}).get('properties'):
            props = order_data['bitrix_data']['properties']
            city_from_props = props.get('city', props.get('CITY'))
            if city_from_props:
                city_name = self.get_city_name(city_from_props)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ –∏–∑ metadata (–Ω–æ–≤–æ–µ –ø–æ–ª–µ pickup_order)
        metadata = order_data.get('metadata', {})
        is_self_pickup = metadata.get('pickup_order', metadata.get('is_self_pickup', order_data.get('is_self_pickup', False)))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_address = order_data.get('delivery_address', '')
        if delivery_address == '–°–∞–º–æ–≤—ã–≤–æ–∑':
            is_self_pickup = True
            
        delivery_type = '–°–∞–º–æ–≤—ã–≤–æ–∑' if is_self_pickup else '–î–æ—Å—Ç–∞–≤–∫–∞'
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å
        address = order_data.get('delivery_address', '')
        if is_self_pickup:
            address = '–°–∞–º–æ–≤—ã–≤–æ–∑'
        elif not address:
            address = '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == 'status_change':
            emoji = 'üîÑ'
            action_name = '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω'
        else:
            action_emoji = {
                'create': 'üì¶',
                'create_order': 'üì¶',
                'update': 'üîÑ',
                'update_existing': 'üîÑ',
                'delete': '‚ùå'
            }
            
            action_text = {
                'create': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
                'create_order': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
                'update': '–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω',
                'update_existing': '–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω', 
                'delete': '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω'
            }
            
            emoji = action_emoji.get(action, 'üì¶')
            action_name = action_text.get(action, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{emoji} <b>{action_name}</b>\n"
        message += f"üÜî –ó–∞–∫–∞–∑: #{order_number}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if action in ('status_change', 'update', 'order.status_change', 'order.update') and order_data.get('previous_status'):
            current_status = order_data.get('status', '')
            previous_status = order_data.get('previous_status', '')
            
            current_desc = self.get_status_description(current_status)
            previous_desc = self.get_status_description(previous_status)
            
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
            current_clean = current_desc.split(' ', 1)[1] if ' ' in current_desc else current_desc
            previous_clean = previous_desc.split(' ', 1)[1] if ' ' in previous_desc else previous_desc
            
            message += f"üìã –°—Ç–∞—Ç—É—Å: {previous_clean} ‚Üí {current_clean}\n"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_status = order_data.get('status', '')
            status_desc = self.get_status_description(current_status)
            message += f"üìã –°—Ç–∞—Ç—É—Å: {status_desc}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
        if customer_phone and len(customer_phone) > 3:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if len(customer_phone) >= 7:
                masked_phone = customer_phone[:4] + '*' * (len(customer_phone) - 7) + customer_phone[-3:]
            else:
                masked_phone = customer_phone
            message += f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {masked_phone}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        delivery_icon = "üè™" if is_self_pickup else "üöö"
        message += f"{delivery_icon} –¢–∏–ø: {delivery_type}\n"
        message += f"üìç –ì–æ—Ä–æ–¥: {city_name}\n"
        
        if not is_self_pickup and address != '–ù–µ —É–∫–∞–∑–∞–Ω':
            # –û–±—Ä–µ–∑–∞–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            short_address = address[:50] + '...' if len(address) > 50 else address
            message += f"üè† –ê–¥—Ä–µ—Å: {short_address}\n"
        
        # –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
        if total_amount and total_amount > 0:
            message += f"üí∞ –°—É–º–º–∞: {total_amount:,.0f} ‚Ç∏\n"
        
        message += f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ Supabase\n"
        message += f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        return message
    
    def format_product_notification(self, product_data: Dict[str, Any], action: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ"""
        product_name = product_data.get('name', 'N/A')
        price = product_data.get('price', 0)
        bitrix_id = product_data.get('metadata', {}).get('bitrix_id', 'N/A')
        
        action_emoji = {
            'create': 'üõç',
            'update': 'üîÑ',
            'delete': '‚ùå'
        }
        
        action_text = {
            'create': '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
            'update': '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω',
            'delete': '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω'
        }
        
        emoji = action_emoji.get(action, 'üõç')
        action_name = action_text.get(action, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        
        message = f"{emoji} <b>{action_name}</b>\n"
        message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
        message += f"üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚Ç∏\n"
        message += f"üÜî Bitrix ID: {bitrix_id}\n"
        message += f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ Supabase\n"
        message += f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        return message
    
    def format_error_notification(self, error_type: str, error_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        entity_id = error_data.get('entity_id', 'N/A')
        error_message = error_data.get('error_message', 'Unknown error')
        
        message = f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n"
        message += f"üìã –¢–∏–ø: {error_type}\n"
        message += f"üÜî ID: {entity_id}\n"
        message += f"‚ùå –û—à–∏–±–∫–∞: {error_message[:200]}\n"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        message += f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        return message
    
    async def notify_order_sync(self, order_data: Dict[str, Any], action: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""
        if not config.TELEGRAM_NOTIFICATIONS_ENABLED:
            return
        
        try:
            # –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö
            users = await self._get_active_users('admin_only')
            
            if not users:
                logger.info("No active admin users for order notifications")
                return
            
            message = self.format_order_notification(order_data, action)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            sent_count = 0
            for user in users:
                if await self._send_message(user['chat_id'], message):
                    sent_count += 1
            
            logger.info(f"Order notification sent to {sent_count}/{len(users)} admin users")
            
        except Exception as e:
            logger.error(f"Error sending order notification: {e}")
    
    async def notify_product_sync(self, product_data: Dict[str, Any], action: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        if not config.TELEGRAM_NOTIFICATIONS_ENABLED:
            return
        
        try:
            # –¢–æ–≤–∞—Ä—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            users = await self._get_active_users('admin_only')
            
            if not users:
                logger.info("No active admin users for product notifications")
                return
            
            message = self.format_product_notification(product_data, action)
            
            sent_count = 0
            for user in users:
                if await self._send_message(user['chat_id'], message):
                    sent_count += 1
            
            logger.info(f"Product notification sent to {sent_count}/{len(users)} admin users")
            
        except Exception as e:
            logger.error(f"Error sending product notification: {e}")
    
    async def notify_sync_result(self, order_data: Dict[str, Any], status: str, error: str = None, action: str = 'sync'):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞)
        
        Args:
            order_data: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            status: 'success' –∏–ª–∏ 'error'
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ('create', 'update', 'sync')
        """
        if not config.TELEGRAM_NOTIFICATIONS_ENABLED:
            return
            
        try:
            # –î–ª—è –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –î–ª—è —É—Å–ø–µ—Ö–æ–≤ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ (–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            if status == 'error':
                users = await self._get_active_users('errors_only')  # –í—Å–µ –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ—à–∏–±–∫–∏
            else:
                users = await self._get_active_users('admin_only')   # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –¥–ª—è —É—Å–ø–µ—Ö–æ–≤
            
            if not users:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if status == 'success':
                order_number = order_data.get('order_number') or order_data.get('ID', 'N/A')
                total_amount = order_data.get('total_amount', 0)
                
                # –ö–æ—Ä–æ—Ç–∫–æ–µ —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = f"‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞</b>\n"
                message += f"üì¶ –ó–∞–∫–∞–∑ #{order_number}\n"
                message += f"üí∞ –°—É–º–º–∞: {total_amount:,.0f} ‚Ç∏\n"
                message += f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: {action}"
                
            else:
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                order_number = order_data.get('order_number') or order_data.get('ID', 'N/A')
                
                message = f"‚ùå <b>–û–®–ò–ë–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò</b>\n"
                message += f"üì¶ –ó–∞–∫–∞–∑ #{order_number}\n"
                message += f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
                message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: <code>{error[:200]}{'...' if len(str(error)) > 200 else ''}</code>\n\n"
                message += f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            sent_count = 0
            for user in users:
                if await self._send_message(user['chat_id'], message):
                    sent_count += 1
            
            logger.info(f"Sync result notification ({status}) sent to {sent_count}/{len(users)} users")
            
        except Exception as e:
            logger.error(f"Error sending sync result notification: {e}")
    
    async def notify_error(self, error_type: str, error_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ - –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not config.TELEGRAM_NOTIFICATIONS_ENABLED:
            return
        
        try:
            # –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users = await self._get_active_users('errors_only')
            
            if not users:
                logger.info("No active users for error notifications")
                return
            
            message = self.format_error_notification(error_type, error_data)
            
            sent_count = 0
            for user in users:
                if await self._send_message(user['chat_id'], message):
                    sent_count += 1
            
            logger.info(f"Error notification sent to {sent_count}/{len(users)} users")
            
        except Exception as e:
            logger.error(f"Error sending error notification: {e}")
    
    async def notify_daily_stats(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"""
        if not config.TELEGRAM_NOTIFICATIONS_ENABLED:
            return
        
        try:
            users = await self._get_active_users('admin_only')
            
            if not users or not self.supabase:
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            today_start = f"{today}T00:00:00Z"
            
            orders_today = self.supabase.table('orders')\
                .select('id, total_amount', count='exact')\
                .gte('created_at', today_start)\
                .execute()
            
            total_amount = sum(float(order.get('total_amount', 0) or 0) for order in orders_today.data)
            
            message = f"üìà <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            message += f"üìÖ {today.strftime('%d.%m.%Y')}\n\n"
            message += f"üì¶ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {orders_today.count}\n"
            message += f"üí∞ –°—É–º–º–∞: {total_amount:,.0f} ‚Ç∏\n"
            
            if orders_today.count > 0:
                avg_order = total_amount / orders_today.count
                message += f"üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order:,.0f} ‚Ç∏\n"
            
            message += f"\nü§ñ –ë–æ—Ç Cvety.kz"
            
            sent_count = 0
            for user in users:
                if await self._send_message(user['chat_id'], message):
                    sent_count += 1
            
            logger.info(f"Daily stats sent to {sent_count}/{len(users)} admin users")
            
        except Exception as e:
            logger.error(f"Error sending daily stats: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é"""
        if self._session:
            await self._session.close()
            self._session = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä notifier
notifier_instance = None

def get_notifier():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä notifier"""
    global notifier_instance
    if notifier_instance is None:
        notifier_instance = TelegramNotifier()
    return notifier_instance

async def send_order_notification(order_data: Dict[str, Any], action: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    notifier = get_notifier()
    await notifier.notify_order_sync(order_data, action)

async def send_product_notification(product_data: Dict[str, Any], action: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ"""
    notifier = get_notifier()
    await notifier.notify_product_sync(product_data, action)

async def send_error_notification(error_type: str, error_data: Dict[str, Any]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    notifier = get_notifier()
    await notifier.notify_error(error_type, error_data)

async def send_sync_result_notification(order_data: Dict[str, Any], status: str, error: str = None, action: str = 'sync'):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    notifier = get_notifier()
    await notifier.notify_sync_result(order_data, status, error, action)