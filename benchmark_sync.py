#!/usr/bin/env python3
"""
Benchmark –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
"""
import time
import requests
import json
import statistics
from typing import List

def benchmark_webhook(order_id: str = "122379", iterations: int = 5) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"""
    
    webhook_url = "http://localhost:8001/webhooks/bitrix/order"
    payload = {
        "event": "order.status_change",
        "token": "fad5fbe4c8a520cf6d5453685b758c7fd9f6681f084be335fcdcd190ad9aaa0e",
        "data": {
            "ID": order_id,
            "STATUS_ID": "AP"
        }
    }
    
    times = []
    errors = 0
    
    print(f"üèÉ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ webhook –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}...")
    print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {iterations}\n")
    
    for i in range(iterations):
        start = time.time()
        try:
            response = requests.post(webhook_url, json=payload, timeout=30)
            elapsed = time.time() - start
            times.append(elapsed)
            
            status_icon = "‚úÖ" if response.status_code == 200 else "‚ö†Ô∏è"
            print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}: {elapsed:.3f}s {status_icon}")
        except Exception as e:
            errors += 1
            print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}: ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.5)
    
    if times:
        return {
            "min": min(times),
            "max": max(times),
            "avg": statistics.mean(times),
            "median": statistics.median(times),
            "errors": errors,
            "success_rate": (len(times) / iterations) * 100
        }
    else:
        return {"errors": errors, "success_rate": 0}

def benchmark_order_detail(order_id: str = "2b5d8bca-335a-459f-882f-09eb07d9bbb5", iterations: int = 5) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–∞"""
    
    detail_url = f"http://localhost:8001/crm/orders/{order_id}"
    
    times = []
    errors = 0
    
    print(f"\nüìÑ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–∞...")
    print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {iterations}\n")
    
    for i in range(iterations):
        start = time.time()
        try:
            response = requests.get(detail_url, timeout=30)
            elapsed = time.time() - start
            times.append(elapsed)
            
            status_icon = "‚úÖ" if response.status_code == 200 else "‚ö†Ô∏è"
            print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}: {elapsed:.3f}s {status_icon}")
        except Exception as e:
            errors += 1
            print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}: ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(0.5)
    
    if times:
        return {
            "min": min(times),
            "max": max(times),
            "avg": statistics.mean(times),
            "median": statistics.median(times),
            "errors": errors,
            "success_rate": (len(times) / iterations) * 100
        }
    else:
        return {"errors": errors, "success_rate": 0}

def benchmark_orders_list(iterations: int = 5) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    
    list_url = "http://localhost:8001/crm/orders"
    
    times = []
    errors = 0
    
    print(f"\nüìã –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
    print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {iterations}\n")
    
    for i in range(iterations):
        start = time.time()
        try:
            response = requests.get(list_url, timeout=30)
            elapsed = time.time() - start
            times.append(elapsed)
            
            status_icon = "‚úÖ" if response.status_code == 200 else "‚ö†Ô∏è"
            print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}: {elapsed:.3f}s {status_icon}")
        except Exception as e:
            errors += 1
            print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}: ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(0.5)
    
    if times:
        return {
            "min": min(times),
            "max": max(times),
            "avg": statistics.mean(times),
            "median": statistics.median(times),
            "errors": errors,
            "success_rate": (len(times) / iterations) * 100
        }
    else:
        return {"errors": errors, "success_rate": 0}

def print_results(name: str, results: dict):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã {name}:")
    print("‚îÄ" * 40)
    
    if results.get("success_rate", 0) > 0:
        print(f"  ‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {results['min']:.3f}s")
        print(f"  üêå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {results['max']:.3f}s")
        print(f"  üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {results['avg']:.3f}s")
        print(f"  üìä –ú–µ–¥–∏–∞–Ω–∞: {results['median']:.3f}s")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {results['success_rate']:.1f}%")
        if results['errors'] > 0:
            print(f"  ‚ùå –û—à–∏–±–æ–∫: {results['errors']}")
    else:
        print(f"  ‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")

def save_results(results: dict, filename: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    with open(filename, 'w') as f:
        json.dump(results, f, indent=2)
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

if __name__ == "__main__":
    print("=" * 50)
    print("üöÄ –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò CRM")
    print("=" * 50)
    
    all_results = {}
    
    # –¢–µ—Å—Ç webhook
    webhook_results = benchmark_webhook(iterations=5)
    print_results("Webhook —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", webhook_results)
    all_results["webhook"] = webhook_results
    
    # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    detail_results = benchmark_order_detail(iterations=5)
    print_results("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–∞", detail_results)
    all_results["order_detail"] = detail_results
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    list_results = benchmark_orders_list(iterations=5)
    print_results("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", list_results)
    all_results["orders_list"] = list_results
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    save_results(all_results, f"benchmark_before_{timestamp}.json")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("=" * 50)