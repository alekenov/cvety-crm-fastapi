#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ Supabase
–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
"""

from supabase import create_client
import os
from dotenv import load_dotenv
from collections import defaultdict

load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")

def find_and_remove_duplicates():
    """–ù–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    print("–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤...")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
    result = supabase.table('sellers').select('id, name, slug').execute()
    
    if not result.data:
        print("–ü—Ä–æ–¥–∞–≤—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    sellers_by_name = defaultdict(list)
    for seller in result.data:
        sellers_by_name[seller['name']].append(seller)
    
    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = {name: sellers for name, sellers in sellers_by_name.items() if len(sellers) > 1}
    
    if not duplicates:
        print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"\n‚ùó –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –Ω–∞–∑–≤–∞–Ω–∏–π —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏:")
    
    total_to_delete = 0
    sellers_to_delete = []
    
    for name, sellers_list in duplicates.items():
        print(f"\n'{name}': {len(sellers_list)} –∑–∞–ø–∏—Å–µ–π")
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        sellers_with_counts = []
        for seller in sellers_list:
            count_result = supabase.table('products')\
                .select('id', count='exact')\
                .eq('seller_id', seller['id'])\
                .execute()
            
            product_count = count_result.count if hasattr(count_result, 'count') else 0
            sellers_with_counts.append({
                **seller,
                'product_count': product_count
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sellers_with_counts.sort(key=lambda x: x['product_count'], reverse=True)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤)
        keeper = sellers_with_counts[0]
        to_delete = sellers_with_counts[1:]
        
        print(f"  ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: ID={keeper['id'][:8]}... ({keeper['product_count']} —Ç–æ–≤–∞—Ä–æ–≤)")
        
        for seller in to_delete:
            print(f"  ‚ùå –£–¥–∞–ª—è–µ–º: ID={seller['id'][:8]}... ({seller['product_count']} —Ç–æ–≤–∞—Ä–æ–≤)")
            sellers_to_delete.append(seller['id'])
            total_to_delete += 1
    
    if sellers_to_delete:
        print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {total_to_delete} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (yes/no): ")
        
        if response.lower() in ['yes', 'y', '–¥–∞']:
            deleted_count = 0
            for seller_id in sellers_to_delete:
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º seller_id —É —Ç–æ–≤–∞—Ä–æ–≤
                    supabase.table('products')\
                        .update({'seller_id': None, 'seller_name': None})\
                        .eq('seller_id', seller_id)\
                        .execute()
                    
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                    supabase.table('sellers')\
                        .delete()\
                        .eq('id', seller_id)\
                        .execute()
                    
                    deleted_count += 1
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {seller_id}: {e}")
            
            print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        else:
            print("\n‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    result = supabase.table('sellers').select('id', count='exact').execute()
    total_sellers = result.count if hasattr(result, 'count') else len(result.data)
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {total_sellers}")

if __name__ == "__main__":
    print("="*60)
    print("  –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í –ú–ê–ì–ê–ó–ò–ù–û–í")
    print("="*60)
    
    find_and_remove_duplicates()
    
    print("\n" + "="*60)