#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Supabase ‚Üí Bitrix
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ webhook, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Bitrix
"""

import requests
import json
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WEBHOOK_URL = "http://localhost:8001/webhooks/bitrix/order"
WEBHOOK_TOKEN = "fad5fbe4c8a520cf6d5453685b758c7fd9f6681f084be335fcdcd190ad9aaa0e"

def test_reverse_synchronization():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é:
    1. –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ webhook (–Ω–µ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω Bitrix)
    2. –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –≤ Supabase
    3. –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Bitrix
    4. –í Supabase –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è bitrix_order_id
    """
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–¢–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò Supabase ‚Üí Bitrix")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    timestamp = int(time.time())
    test_order_id = timestamp + 800000  # –°–º–µ—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID
    test_user_id = timestamp
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ (–ù–ï –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω Bitrix)
    test_payload = {
        "event": "order.create",
        "token": WEBHOOK_TOKEN,
        "data": {
            "ID": str(test_order_id),
            "ACCOUNT_NUMBER": str(test_order_id),
            "STATUS_ID": "N",
            "PRICE": "7200.0000",
            "PRICE_DELIVERY": "1800.0000",
            "DISCOUNT_VALUE": "0.0000",
            "USER_ID": str(test_user_id),
            "PAYED": "N",
            "DATE_INSERT": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "PAY_SYSTEM_ID": "10",
            "USER_DESCRIPTION": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
            "COMMENTS": None,
            "properties": {
                # –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
                "phone": "+77777777799",
                "email": "reverse_sync_test@example.com",
                # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                "nameRecipient": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –û–±—Ä–∞—Ç–Ω–æ–π –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                "phoneRecipient": "+77777777800",
                "addressRecipient": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —É–ª. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –¥. 1",
                # –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                "data": "2025-08-23",
                "postcardText": "üîÑ –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏! –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ Bitrix CRM.",
                "city": "2",
                "when": "27",
                "iWillGet": "N",
                "pickup": "N",
                "SOURCE_ORDER": "reverse_sync_test",
                "shopId": "17008",
                "opt": "N"
            },
            "basket": [
                {
                    "ID": f"{test_order_id}1",
                    "PRODUCT_ID": "695515",  # –ü–æ–¥—Å–æ–ª–Ω—É—Ö–∏
                    "NAME": "–ü–æ–¥—Å–æ–ª–Ω—É—Ö–∏ –≤ –ø–∞—á–∫–µ 5 —à—Ç (—Ç–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)",
                    "PRICE": "7200.0000",
                    "QUANTITY": "1.0000",
                    "CURRENCY": "KZT",
                    "DISCOUNT_PRICE": "0.0000",
                    "PRODUCT_XML_ID": None
                }
            ],
            "user": {
                "ID": str(test_user_id),
                "phone": "+77777777799",
                "email": "reverse_sync_test@example.com"
            },
            "webhook_source": "test_reverse_sync",  # –ù–ï production_real - –¥–æ–ª–∂–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            "webhook_timestamp": datetime.now().isoformat()
        }
    }
    
    print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    print(f"   Test Order ID: {test_order_id}")
    print(f"   Test User ID: {test_user_id}")
    print(f"   Webhook Source: test_reverse_sync (–¥–æ–ª–∂–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é)")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook
    print(f"\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ webhook –Ω–∞ {WEBHOOK_URL}...")
    try:
        response = requests.post(
            WEBHOOK_URL,
            json=test_payload,
            headers={'Content-Type': 'application/json'},
            timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        )
        
        if response.status_code == 200:
            webhook_result = response.json()
            print(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {webhook_result}")
            
            action = webhook_result.get('action')
            supabase_order_id = webhook_result.get('order_id')
            
            if action == 'create_order' and supabase_order_id:
                print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ Supabase: {supabase_order_id}")
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (10 —Å–µ–∫)...")
                time.sleep(10)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bitrix_order_id –ø–æ—è–≤–∏–ª—Å—è –≤ Supabase
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
                check_reverse_sync_result(test_order_id, supabase_order_id)
                
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç webhook: action={action}, order_id={supabase_order_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {response.status_code} - {response.text}")
            
    except requests.exceptions.Timeout:
        print(f"‚ùå Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook: {e}")

def check_reverse_sync_result(test_order_id, supabase_order_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
        api_url = "http://localhost:8001/api/orders"
        response = requests.get(api_url, timeout=10)
        
        if response.status_code == 200:
            orders = response.json()
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
            test_order = None
            for order in orders:
                if order.get('bitrix_order_id') == test_order_id:
                    test_order = order
                    break
            
            if test_order:
                print(f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ Supabase:")
                print(f"   ‚Ä¢ Supabase ID: {test_order['id']}")
                print(f"   ‚Ä¢ Order Number: {test_order.get('order_number')}")
                print(f"   ‚Ä¢ Bitrix Order ID: {test_order.get('bitrix_order_id')}")
                print(f"   ‚Ä¢ Recipient: {test_order.get('recipient_name')}")
                print(f"   ‚Ä¢ Phone: {test_order.get('recipient_phone')}")
                print(f"   ‚Ä¢ Address: {test_order.get('delivery_address')}")
                print(f"   ‚Ä¢ Postcard: {test_order.get('postcard_text')}")
                print(f"   ‚Ä¢ Total: {test_order.get('total_amount')} KZT")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                bitrix_order_id = test_order.get('bitrix_order_id')
                if bitrix_order_id and bitrix_order_id != test_order_id:
                    print(f"\nüéâ –û–ë–†–ê–¢–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
                    print(f"   üìä Supabase Order: {test_order['id']}")
                    print(f"   üîÑ Bitrix Order: {bitrix_order_id}")
                    print(f"   ‚úÖ –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω –≤ https://cvety.kz/crm/")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É Bitrix MySQL
                    check_bitrix_order_exists(bitrix_order_id)
                    
                elif bitrix_order_id == test_order_id:
                    print(f"\n‚ö†Ô∏è  –û–ë–†–ê–¢–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï –°–†–ê–ë–û–¢–ê–õ–ê")
                    print(f"   bitrix_order_id –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ: {bitrix_order_id}")
                    print(f"   –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –≤ Supabase")
                    
                else:
                    print(f"\n‚ùå –û–ë–†–ê–¢–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï –°–†–ê–ë–û–¢–ê–õ–ê")
                    print(f"   bitrix_order_id = NULL –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                    print(f"   –ó–∞–∫–∞–∑ –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Bitrix")
                
            else:
                print(f"‚ùå –ó–∞–∫–∞–∑ {test_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

def check_bitrix_order_exists(bitrix_order_id):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –≤ Bitrix"""
    print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º –∑–∞–∫–∞–∑ {bitrix_order_id} –≤ Bitrix...")
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ MySQL Bitrix –∏–ª–∏ –∫ API
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"üìã –î–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://cvety.kz/crm/")
    print(f"   2. –ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–∞–∑ #{bitrix_order_id}")
    print(f"   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –û–±—Ä–∞—Ç–Ω–æ–π –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'")
    print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏: 'üîÑ –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!'")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    print("    –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ Supabase —á–µ—Ä–µ–∑ webhook")
    print("    –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ Bitrix\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
    try:
        response = requests.get("http://localhost:8001/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ HTTP 200")
    except:
        print("‚ùå FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ localhost:8001")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 -m uvicorn app:app --host 0.0.0.0 --port 8001 --reload")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    test_reverse_synchronization()

if __name__ == "__main__":
    main()