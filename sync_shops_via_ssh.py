#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL –≤ Supabase —á–µ—Ä–µ–∑ SSH
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SSH –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import subprocess
import json
from supabase import create_client
import os
from dotenv import load_dotenv
from datetime import datetime
import sys

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SSH –∏ MySQL
SSH_HOST = "root@185.125.90.141"
MYSQL_USER = "usercvety"
MYSQL_PASS = "QQlPCtTA@z2%mhy"
MYSQL_DB = "dbcvety"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SHOPS_IBLOCK_ID = 32  # ID –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
SELLER_PROPERTY_ID = 290  # ID —Å–≤–æ–π—Å—Ç–≤–∞ "–ü—Ä–æ–¥–∞–≤–µ—Ü" –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤

def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def execute_mysql_query(query):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å MySQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ SSH"""
    # –î–æ–±–∞–≤–ª—è–µ–º export LANG=C —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å locale
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è SSH –∫–æ–º–∞–Ω–¥—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    cmd = f'ssh {SSH_HOST} "export LANG=C; mysql -u {MYSQL_USER} -p\'{MYSQL_PASS}\' {MYSQL_DB} -N -e \\"{query}\\" 2>&1 | grep -v \\"warning: setlocale\\" | grep -v \\"Warning] Using a password\\""'
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            return result.stdout.strip()
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            cmd_alt = f'ssh {SSH_HOST} \'export LANG=C; mysql -u {MYSQL_USER} -p"{MYSQL_PASS}" {MYSQL_DB} -N -e "{query}"\''
            result_alt = subprocess.run(cmd_alt, shell=True, capture_output=True, text=True, timeout=30)
            if result_alt.returncode == 0:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑ –≤—ã–≤–æ–¥–∞
                lines = result_alt.stdout.strip().split('\n')
                filtered_lines = [
                    line for line in lines 
                    if not ('warning: setlocale' in line or 'Warning] Using a password' in line)
                ]
                return '\n'.join(filtered_lines)
            else:
                print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
                return None
    except subprocess.TimeoutExpired:
        print("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None

def get_shops_from_mysql_via_ssh(active_only=True):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL —á–µ—Ä–µ–∑ SSH"""
    print_section(f"–ü–æ–ª—É—á–µ–Ω–∏–µ {'–∞–∫—Ç–∏–≤–Ω—ã—Ö' if active_only else '–≤—Å–µ—Ö'} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ SSH")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    active_filter = "AND ACTIVE = 'Y'" if active_only else ""
    query = f"SELECT ID, NAME, IFNULL(CODE, ''), ACTIVE, IFNULL(SORT, 500) FROM b_iblock_element WHERE IBLOCK_ID = {SHOPS_IBLOCK_ID} {active_filter} ORDER BY SORT, NAME"
    
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—ã...")
    result = execute_mysql_query(query)
    
    if not result:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return []
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    shops = []
    lines = result.split('\n')
    
    for line in lines:
        if line.strip():
            parts = line.split('\t')
            if len(parts) >= 5:
                shop = {
                    'bitrix_id': int(parts[0]) if parts[0].isdigit() else 0,
                    'name': parts[1],
                    'slug': parts[2] if parts[2] else None,
                    'ACTIVE': parts[3],
                    'sort_order': int(parts[4]) if parts[4].isdigit() else 500,
                    'description': None,
                    'DATE_CREATE': None,
                    'TIMESTAMP_X': None,
                    'product_count': 0
                }
                shops.append(shop)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤
    print("\n–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º –¥–ª—è —Ç–æ–ø –º–∞–≥–∞–∑–∏–Ω–æ–≤...")
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    top_shops = sorted(shops[:30], key=lambda x: x['bitrix_id'])
    
    for shop in top_shops:
        count_query = f"""
        SELECT COUNT(DISTINCT ep.IBLOCK_ELEMENT_ID)
        FROM b_iblock_element_property ep
        WHERE ep.IBLOCK_PROPERTY_ID = {SELLER_PROPERTY_ID}
        AND ep.VALUE = {shop['bitrix_id']}
        """.replace('\n', ' ')
        
        count_result = execute_mysql_query(count_query)
        shop['product_count'] = int(count_result) if count_result and count_result.isdigit() else 0
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å—Ç–∞–≤–∏–º 0
    for shop in shops[30:]:
        shop['product_count'] = 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
    shops_with_products = [s for s in shops if s.get('product_count', 0) > 0]
    shops_with_products.sort(key=lambda x: x['product_count'], reverse=True)
    
    if shops_with_products:
        print("\nüìä –¢–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, shop in enumerate(shops_with_products[:10], 1):
            status = "‚úÖ" if shop['ACTIVE'] == 'Y' else "‚ùå"
            print(f"  {i}. {shop['name']} (ID: {shop['bitrix_id']}, –¢–æ–≤–∞—Ä–æ–≤: {shop['product_count']}) {status}")
    
    return shops

def clear_test_shops(supabase):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å emoji-–Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
    print_section("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        result = supabase.table('sellers').select('id, name').execute()
        
        if result.data:
            # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ emoji –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            emoji_chars = ['üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ', 'üíê', 'üè™', 'üéÅ', 'üåº', 'üåµ']
            test_sellers = [
                s for s in result.data 
                if any(char in s['name'] for char in emoji_chars)
            ]
            
            if test_sellers:
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(test_sellers)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                
                deleted_count = 0
                for seller in test_sellers:
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º seller_id —É —Ç–æ–≤–∞—Ä–æ–≤
                        supabase.table('products')\
                            .update({'seller_id': None, 'seller_name': None})\
                            .eq('seller_id', seller['id'])\
                            .execute()
                        
                        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                        supabase.table('sellers')\
                            .delete()\
                            .eq('id', seller['id'])\
                            .execute()
                        
                        deleted_count += 1
                        if deleted_count <= 5:
                            print(f"  ‚ùå –£–¥–∞–ª–µ–Ω: {seller['name']}")
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {seller['name']}: {e}")
                
                if deleted_count > 5:
                    print(f"  ... –∏ –µ—â–µ {deleted_count - 5} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            else:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return False

def sync_shops_to_supabase(mysql_shops):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –≤ Supabase"""
    print_section("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase")
    
    if not mysql_shops:
        print("‚ùå –ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return False
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        clear_test_shops(supabase)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ Supabase
        existing_result = supabase.table('sellers')\
            .select('id, name, metadata')\
            .execute()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ bitrix_id
        existing_shops = {}
        if existing_result.data:
            for shop in existing_result.data:
                if shop.get('metadata', {}).get('bitrix_id'):
                    bitrix_id = str(shop['metadata']['bitrix_id'])
                    existing_shops[bitrix_id] = shop
        
        # –°—á–µ—Ç—á–∏–∫–∏
        created_count = 0
        updated_count = 0
        error_count = 0
        
        print(f"\n–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é {len(mysql_shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤...")
        print(f"–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Supabase: {len(existing_shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã
        for shop in mysql_shops:
            try:
                bitrix_id = str(shop['bitrix_id'])
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                shop_data = {
                    'name': shop['name'],
                    'slug': shop['slug'] or shop['name'].lower().replace(' ', '-').replace('.', ''),
                    'description': shop['description'],
                    'is_active': shop['ACTIVE'] == 'Y',
                    'metadata': {
                        'bitrix_id': shop['bitrix_id'],
                        'product_count': shop.get('product_count', 0),
                        'sort_order': shop.get('sort_order', 500),
                        'synced_at': datetime.now().isoformat()
                    }
                }
                
                if bitrix_id in existing_shops:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω
                    result = supabase.table('sellers')\
                        .update(shop_data)\
                        .eq('id', existing_shops[bitrix_id]['id'])\
                        .execute()
                    
                    if result.data:
                        updated_count += 1
                        if updated_count <= 5:
                            print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {shop['name']}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
                    result = supabase.table('sellers')\
                        .insert(shop_data)\
                        .execute()
                    
                    if result.data:
                        created_count += 1
                        if created_count <= 5:
                            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {shop['name']} (ID: {result.data[0]['id']})")
                
            except Exception as e:
                error_count += 1
                if error_count <= 3:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {shop['name']}: {e}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print_section("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print(f"üìä –í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ MySQL: {len(mysql_shops)}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {created_count}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        log_data = {
            'timestamp': datetime.now().isoformat(),
            'total_mysql': len(mysql_shops),
            'created': created_count,
            'updated': updated_count,
            'errors': error_count,
            'top_shops': [
                {
                    'name': s['name'],
                    'bitrix_id': s['bitrix_id'],
                    'product_count': s.get('product_count', 0),
                    'active': s['ACTIVE'] == 'Y'
                }
                for s in sorted(mysql_shops, key=lambda x: x.get('product_count', 0), reverse=True)
                if s.get('product_count', 0) > 0
            ][:20]
        }
        
        log_file = f"sync_shops_ssh_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(log_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {log_file}")
        
        return created_count + updated_count > 0
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Supabase: {e}")
        return False

def verify_sync():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
        all_shops = supabase.table('sellers')\
            .select('id, name, is_active, metadata')\
            .execute()
        
        if all_shops.data:
            active_shops = [s for s in all_shops.data if s.get('is_active')]
            inactive_shops = [s for s in all_shops.data if not s.get('is_active')]
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ Supabase:")
            print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_shops)}")
            print(f"  ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_shops)}")
            print(f"  üì¶ –í—Å–µ–≥–æ: {len(all_shops.data)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –º–∞–≥–∞–∑–∏–Ω–æ–≤
            print("\nüìä –ü–µ—Ä–≤—ã–µ 10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ Supabase:")
            for i, shop in enumerate(all_shops.data[:10], 1):
                status = "‚úÖ" if shop.get('is_active') else "‚ùå"
                bitrix_id = shop.get('metadata', {}).get('bitrix_id', '-')
                print(f"  {i}. {shop['name']} (Bitrix ID: {bitrix_id}) {status}")
        else:
            print("‚ùå –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Supabase")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîÑ " * 20)
    print("  –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ê–ì–ê–ó–ò–ù–û–í –ß–ï–†–ï–ó SSH")
    print("  MySQL (Bitrix Production) ‚Üí Supabase")
    print("üîÑ " * 20)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    test_result = execute_mysql_query("SELECT VERSION()")
    if test_result:
        print(f"‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. MySQL –≤–µ—Ä—Å–∏—è: {test_result}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ SSH")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
    if not SUPABASE_URL or not SUPABASE_KEY:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_KEY")
        return
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã
    print("\n‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—ã (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É)...")
    mysql_shops = get_shops_from_mysql_via_ssh(active_only=True)
    
    if mysql_shops:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(mysql_shops)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        print("–≠—Ç–æ —É–¥–∞–ª–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏ –∑–∞–º–µ–Ω–∏—Ç –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
        
        if response.lower() in ['yes', 'y', '–¥–∞']:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            success = sync_shops_to_supabase(mysql_shops)
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                verify_sync()
                print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ update_product_shop_links.py")
            else:
                print("\n‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        else:
            print("\n‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ MySQL")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()