#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoints –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Bitrix
"""

import asyncio
import requests
import json
from datetime import datetime
from typing import Optional
from supabase import create_client
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8001"
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def print_status(message: str, success: bool = True):
    """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–∞ —Å emoji"""
    emoji = "‚úÖ" if success else "‚ùå"
    print(f"{emoji} {message}")

def get_test_product():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_section("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    
    try:
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        result = supabase.table('products')\
            .select('id, name, is_active, metadata')\
            .eq('is_active', True)\
            .limit(1)\
            .execute()
        
        if result.data:
            product = result.data[0]
            print_status(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product['name']} (ID: {product['id']})")
            print(f"  –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if product['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ bitrix_product_id –≤ metadata
            bitrix_id = product.get('metadata', {}).get('bitrix_id')
            if bitrix_id:
                print(f"  Bitrix ID: {bitrix_id}")
            else:
                print("  ‚ö†Ô∏è  Bitrix ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ metadata")
            
            return product
        else:
            print_status("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ", False)
            return None
            
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}", False)
        return None

def test_deactivate_product(product_id: str):
    """–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    print_section("–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º API endpoint –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        response = requests.patch(
            f"{API_BASE_URL}/api/products/{product_id}/deactivate"
        )
        
        if response.status_code == 200:
            data = response.json()
            print_status(f"–¢–æ–≤–∞—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ API")
            print(f"  Response: {json.dumps(data, indent=2)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            check_result = supabase.table('products')\
                .select('is_active')\
                .eq('id', product_id)\
                .single()\
                .execute()
            
            if check_result.data:
                is_active = check_result.data['is_active']
                if not is_active:
                    print_status("–°—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print_status("–°—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è!", False)
            
            return True
        else:
            print_status(f"–û—à–∏–±–∫–∞ API: {response.status_code}", False)
            print(f"  Response: {response.text}")
            return False
            
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}", False)
        return False

def test_activate_product(product_id: str):
    """–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    print_section("–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º API endpoint –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        response = requests.patch(
            f"{API_BASE_URL}/api/products/{product_id}/activate"
        )
        
        if response.status_code == 200:
            data = response.json()
            print_status(f"–¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ API")
            print(f"  Response: {json.dumps(data, indent=2)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            check_result = supabase.table('products')\
                .select('is_active')\
                .eq('id', product_id)\
                .single()\
                .execute()
            
            if check_result.data:
                is_active = check_result.data['is_active']
                if is_active:
                    print_status("–°—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print_status("–°—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è!", False)
            
            return True
        else:
            print_status(f"–û—à–∏–±–∫–∞ API: {response.status_code}", False)
            print(f"  Response: {response.text}")
            return False
            
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}", False)
        return False

def test_bulk_operations():
    """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print_section("–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        result = supabase.table('products')\
            .select('id, name, is_active')\
            .limit(3)\
            .execute()
        
        if not result.data or len(result.data) < 2:
            print_status("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", False)
            return False
        
        product_ids = [p['id'] for p in result.data]
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {len(product_ids)} —Ç–æ–≤–∞—Ä–∞–º–∏")
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        print("\nüìã –ú–∞—Å—Å–æ–≤–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è...")
        response = requests.post(
            f"{API_BASE_URL}/api/products/bulk-deactivate",
            json=product_ids
        )
        
        if response.status_code == 200:
            data = response.json()
            print_status(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {data.get('deactivated_count', 0)} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            print_status(f"–û—à–∏–±–∫–∞: {response.status_code}", False)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        import time
        time.sleep(1)
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        print("\nüìã –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è...")
        response = requests.post(
            f"{API_BASE_URL}/api/products/bulk-activate",
            json=product_ids
        )
        
        if response.status_code == 200:
            data = response.json()
            print_status(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {data.get('activated_count', 0)} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            print_status(f"–û—à–∏–±–∫–∞: {response.status_code}", False)
        
        return True
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö: {e}", False)
        return False

def test_invalid_product():
    """–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–≤–∞—Ä–æ–º"""
    print_section("–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–≤–∞—Ä–æ–º")
    
    fake_id = "00000000-0000-0000-0000-000000000000"
    
    try:
        response = requests.patch(
            f"{API_BASE_URL}/api/products/{fake_id}/activate"
        )
        
        if response.status_code == 404:
            print_status("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
            return True
        else:
            print_status(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}", False)
            return False
            
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞: {e}", False)
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "üöÄ " * 20)
    print("  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ö–¢–ò–í–ê–¶–ò–ò/–î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò –¢–û–í–ê–†–û–í")
    print("üöÄ " * 20)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
    try:
        response = requests.get(f"{API_BASE_URL}/api/products?limit=1")
        if response.status_code == 200:
            print_status("API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print_status(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", False)
            print("‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
            print("   cd crm_python && python3 -m uvicorn app:app --host 0.0.0.0 --port 8001 --reload")
            return
    except:
        print_status("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API", False)
        print("‚ùó –ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä:")
        print("   cd crm_python && python3 -m uvicorn app:app --host 0.0.0.0 --port 8001 --reload")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    product = get_test_product()
    if not product:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    product_id = product['id']
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    tests_passed = 0
    tests_total = 5
    
    # –¢–µ—Å—Ç 1: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
    if test_deactivate_product(product_id):
        tests_passed += 1
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    import time
    time.sleep(1)
    
    # –¢–µ—Å—Ç 2: –ê–∫—Ç–∏–≤–∞—Ü–∏—è
    if test_activate_product(product_id):
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if test_bulk_operations():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 4: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
    if test_invalid_product():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å Bitrix ID)
    bitrix_id = product.get('metadata', {}).get('bitrix_id')
    if bitrix_id:
        print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Bitrix")
        print("‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        print("   1. –ó–∞–≥—Ä—É–∑–∏—Ç—å PHP endpoint –Ω–∞ production —Å–µ—Ä–≤–µ—Ä")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: ssh root@185.125.90.141 'tail -f /tmp/product_status_sync.log'")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Bitrix –∞–¥–º–∏–Ω–∫–µ")
        tests_passed += 1
    else:
        print_section("–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("‚ö†Ô∏è  –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç Bitrix ID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        tests_passed += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_section("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{tests_total}")
    
    if tests_passed == tests_total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ({tests_total - tests_passed} –∏–∑ {tests_total})")
    
    print("\n" + "="*60)
    print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å PHP endpoint –Ω–∞ production:")
    print("   scp public/supabase-product-status-sync.php root@185.125.90.141:/home/bitrix/www/")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º Bitrix")
    print("3. –î–æ–±–∞–≤–∏—Ç—å UI –∫–Ω–æ–ø–∫–∏ –≤ CRM –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("="*60)

if __name__ == "__main__":
    main()