#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω MySQL –≤ Supabase
–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ cvety.kz –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –≤ Supabase
"""

import os
import sys
import subprocess
from supabase import create_client, Client
from config import config as app_config

def get_supabase() -> Client:
    """Get Supabase client"""
    url = app_config.SUPABASE_URL
    key = app_config.SUPABASE_ANON_KEY
    return create_client(url, key)

def get_production_order_statuses():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω MySQL —á–µ—Ä–µ–∑ SSH
    """
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω MySQL...")
    
    # SSH –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    ssh_command = [
        'ssh', 'root@185.125.90.141',
        'mysql -u bitrix -p$(cat /home/bitrix/.mysql_password) bitrix -e "' +
        'SELECT ' +
        'ID as order_id, ' +
        'STATUS_ID as status, ' +
        'DATE_INSERT, ' +
        'USER_ID, ' +
        'PRICE ' +
        'FROM b_sale_order ' +
        'WHERE STATUS_ID IN (\\"N\\", \\"AP\\", \\"DE\\", \\"P\\", \\"CO\\", \\"TR\\", \\"CF\\", \\"RO\\", \\"RD\\", \\"PD\\", \\"KC\\", \\"GP\\") ' +
        'AND DATE_INSERT > \\"2025-08-20\\" ' +
        'ORDER BY DATE_INSERT DESC ' +
        'LIMIT 50;' +
        '"'
    ]
    
    try:
        result = subprocess.run(ssh_command, capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ SSH: {result.stderr}")
            return None
            
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç MySQL
        lines = result.stdout.strip().split('\n')
        if len(lines) < 2:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL")
            return None
            
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        headers = lines[0].split('\t')
        orders = []
        
        for line in lines[1:]:
            if line.strip():
                values = line.split('\t')
                if len(values) >= 5:
                    order_data = {
                        'order_id': values[0],
                        'status': values[1],
                        'date_insert': values[2],
                        'user_id': values[3],
                        'price': values[4]
                    }
                    orders.append(order_data)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        return orders
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def update_supabase_statuses(production_orders):
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤ Supabase –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    """
    if not production_orders:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
        
    db = get_supabase()
    
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ Supabase...")
    
    # –ü–æ–ª—É—á–∞–µ–º mapping –∏–∑ prodaction order ID –≤ Supabase order
    updated_count = 0
    
    for prod_order in production_orders:
        bitrix_order_id = int(prod_order['order_id'])
        real_status = prod_order['status']
        
        try:
            # –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ Supabase –ø–æ bitrix_order_id
            supabase_orders = db.table('orders')\
                .select('id, order_number, status')\
                .eq('bitrix_order_id', bitrix_order_id)\
                .execute()
            
            if supabase_orders.data:
                supabase_order = supabase_orders.data[0]
                current_status = supabase_order['status']
                
                if current_status != real_status:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    update_result = db.table('orders')\
                        .update({'status': real_status})\
                        .eq('id', supabase_order['id'])\
                        .execute()
                    
                    if update_result.data:
                        print(f"  ‚úÖ –ó–∞–∫–∞–∑ {bitrix_order_id}: {current_status} ‚Üí {real_status}")
                        updated_count += 1
                    else:
                        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ {bitrix_order_id}")
                else:
                    print(f"  ‚ÑπÔ∏è  –ó–∞–∫–∞–∑ {bitrix_order_id}: —Å—Ç–∞—Ç—É—Å —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ({real_status})")
            else:
                print(f"  ‚ö†Ô∏è  –ó–∞–∫–∞–∑ {bitrix_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {bitrix_order_id}: {e}")
    
    print(f"\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–∫–∞–∑–æ–≤")

def show_comparison():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    db = get_supabase()
    
    print("\nüìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤ Supabase (–Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–∫–∞–∑—ã):")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–∫–∞–∑—ã —Å bitrix_order_id
    recent_orders = db.table('orders')\
        .select('bitrix_order_id, order_number, status, created_at')\
        .not_.is_('bitrix_order_id', 'null')\
        .gte('created_at', '2025-08-20')\
        .order('created_at', desc=True)\
        .limit(20)\
        .execute()
    
    if recent_orders.data:
        for order in recent_orders.data:
            bitrix_id = order.get('bitrix_order_id', 'N/A')
            status = order.get('status', 'N/A')
            order_num = order.get('order_number', 'N/A')
            created = order.get('created_at', '')[:16] if order.get('created_at') else 'N/A'
            
            print(f"  ‚Ä¢ {bitrix_id} ({order_num}) - {status} - {created}")

if __name__ == "__main__":
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    show_comparison()
    
    print("\n" + "=" * 60)
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    production_orders = get_production_order_statuses()
    
    if production_orders:
        print("\nüìã –°—Ç–∞—Ç—É—Å—ã –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:")
        for order in production_orders[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
            print(f"  ‚Ä¢ {order['order_id']} - {order['status']} - {order['date_insert']}")
        
        if len(production_orders) > 10:
            print(f"  ... –∏ –µ—â–µ {len(production_orders) - 10} –∑–∞–∫–∞–∑–æ–≤")
        
        # –û–±–Ω–æ–≤–∏—Ç—å –≤ Supabase
        print("\n" + "=" * 60)
        update_supabase_statuses(production_orders)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "=" * 60)
        show_comparison()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")