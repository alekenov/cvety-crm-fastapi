from pydantic import BaseModel, Field
from typing import Optional, List, Any, Dict
from datetime import datetime
from decimal import Decimal

class User(BaseModel):
    """User/Florist model"""
    id: Optional[str] = None
    name: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    role: Optional[str] = None
    is_florist: bool = False
    is_active: bool = True
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    
    def get_display_name(self) -> str:
        """Get display name for the user"""
        if self.name:
            return self.name
        if self.email:
            return self.email.split('@')[0]
        return f"User {self.id[:8] if self.id else 'Unknown'}"

class Product(BaseModel):
    """Product model for the catalog"""
    id: Optional[str] = None
    name: str
    slug: Optional[str] = None
    description: Optional[str] = None
    price: Decimal
    old_price: Optional[Decimal] = None
    quantity: int = 0
    category_id: Optional[str] = None
    metadata: Optional[dict] = {}
    is_active: bool = True
    sort_order: Optional[int] = 500
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    
    @property
    def composition(self) -> Optional[str]:
        """Get composition from metadata"""
        if self.metadata:
            return self.metadata.get('composition')
        return None
    
    @property
    def sku(self) -> Optional[str]:
        """Get SKU from metadata"""
        if self.metadata:
            return self.metadata.get('sku')
        return None
    
    @property
    def seller_id(self) -> Optional[str]:
        """Get seller_id from metadata"""
        if self.metadata:
            return self.metadata.get('seller_id')
        return None
    
    def get_image_url(self) -> Optional[str]:
        """Get the miniature image URL from metadata with full domain"""
        if self.metadata and 'properties' in self.metadata:
            img_path = self.metadata['properties'].get('ru_img_miniature')
            if img_path and img_path.startswith('/'):
                # Convert relative path to absolute URL on production server
                return f"https://cvety.kz{img_path}"
            return img_path
        return None
    
    def get_category(self) -> Optional[str]:
        """Get category from metadata"""
        if self.metadata:
            return self.metadata.get('category')
        return None

class OrderItem(BaseModel):
    """Single item in an order"""
    id: Optional[str] = None
    order_id: Optional[str] = None
    product_id: str
    product_name: str
    quantity: int = Field(..., gt=0)
    price: Decimal = Field(..., gt=0)
    total: Optional[Decimal] = None
    product_snapshot: Optional[dict] = {}
    
    def calculate_total(self) -> Decimal:
        """Calculate total price for this item"""
        return self.price * self.quantity
    
    def get_product_name(self) -> str:
        """Get product name from snapshot or fallback to product_name"""
        if self.product_snapshot and 'name' in self.product_snapshot:
            return self.product_snapshot['name']
        return self.product_name

class Order(BaseModel):
    """Order model"""
    id: Optional[str] = None
    order_number: Optional[str] = None
    status: str = "new"
    
    # User information
    user_id: Optional[str] = None
    user_phone: Optional[str] = None
    user_email: Optional[str] = None
    user_name: Optional[str] = None
    
    # Recipient information
    recipient_name: str
    recipient_phone: str
    
    # Delivery information
    delivery_address: str
    delivery_date: Optional[str] = None
    delivery_time: Optional[str] = None
    delivery_cost: Optional[Decimal] = Decimal('0')
    
    # Pricing
    subtotal: Optional[Decimal] = Decimal('0')
    discount: Optional[Decimal] = Decimal('0')
    total_amount: Decimal
    
    # Additional information
    payment_method: Optional[str] = None
    payment_status: Optional[str] = "pending"
    comment: Optional[str] = None
    postcard_text: Optional[str] = None
    courier_comment: Optional[str] = None
    delivery_coordinates: Optional[dict] = None
    delivery_fee: Optional[Decimal] = Decimal('0')
    discount_amount: Optional[Decimal] = Decimal('0')
    source: Optional[str] = None
    metadata: Optional[dict] = {}
    
    # City and seller
    city_id: Optional[str] = None
    seller_id: Optional[str] = None
    
    # Responsible florist
    responsible_id: Optional[str] = None
    responsible_name: Optional[str] = None
    
    # Timestamps
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    
    # Related data (not stored in DB, loaded separately)
    items: Optional[List[OrderItem]] = []

class ProductCreateRequest(BaseModel):
    """Request model for creating new products"""
    name: str = Field(..., min_length=1, max_length=255)
    price: Decimal = Field(..., gt=0)
    quantity: int = Field(default=0, ge=0)
    description: Optional[str] = None
    composition: Optional[str] = None  # –°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞
    category_id: Optional[str] = None
    sku: Optional[str] = None
    is_active: bool = True
    
    def generate_slug(self) -> str:
        """Generate URL-friendly slug from product name"""
        import re
        slug = self.name.lower()
        # Replace spaces and special chars with hyphens
        slug = re.sub(r'[^a-z0-9–∞-—è]+', '-', slug)
        slug = slug.strip('-')
        return slug

class OrderCreateRequest(BaseModel):
    """Request model for creating new orders"""
    recipient_name: str
    recipient_phone: str
    delivery_address: str
    delivery_date: Optional[str] = None
    delivery_time: Optional[str] = None
    items: List[OrderItem]
    comment: Optional[str] = None
    payment_method: Optional[str] = "cash"

class OrderStatusUpdate(BaseModel):
    """Model for updating order status"""
    status: str = Field(..., description="Order status code")

# Order statuses based on REAL DATA analysis from MySQL Bitrix
# Top 13 actually used statuses (96.9% of all orders)
ORDER_STATUSES = {
    # Most used - Final states (97.3% of orders)
    "F": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",           # 69.7% - Main success status
    "UN": "‚ùå –û—Ç–º–µ–Ω–µ–Ω",          # 27.6% - Main cancellation status  
    
    # Problem handling (1.4% of orders)
    "RF": "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç",          # 0.9% - Returns/refunds
    "RD": "üìÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω",        # 0.5% - Rescheduled orders
    
    # Active workflow statuses (from production analysis)
    "AP": "üü£ –ü—Ä–∏–Ω—è—Ç",           # –ü–†–ò–ù–Ø–¢ (—Ä–æ–∑–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ)
    "DE": "üü¢ –í –ø—É—Ç–∏",           # –í –ü–£–¢–ò (–∑–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ)
    "CO": "üì¶ –°–æ–±—Ä–∞–Ω",           # 0.1% - Assembled
    "TR": "üöö –ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É",  # 0.8% - Handed to courier
    "N": "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑",       # 0.1% - New orders
    "PD": "üí∞ –û–ø–ª–∞—á–µ–Ω",          # 0.04% - Paid
    "RO": "üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω",     # 0.1% - Reassigned
    "CF": "üí≥ –ñ–¥–µ–º –æ–ø–ª–∞—Ç—É",      # 0.1% - Waiting for payment
    "P": "üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",       # Processing status
    "KC": "üè™ –£ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",       # Partner handling
    "GP": "üéÅ –ü–æ–¥–∞—Ä–æ–∫",          # Gift status
    
    # System errors
    "CA": "‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π", # 0.02% - System cancelled
    "ER": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",    # 0.02% - Payment error
    
    # Compatibility with Supabase  
    "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",    # Maps to F
    "new": "üÜï –ù–æ–≤—ã–π",           # Maps to N
    "cancelled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω",    # Maps to UN
    "processing": "üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", # Maps to P
    "paid": "üí∞ –û–ø–ª–∞—á–µ–Ω",        # Maps to PD
    "unrealized": "‚ùì –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
}

PAYMENT_METHODS = {
    "cash": "üíµ –ù–∞–ª–∏—á–Ω—ã–µ",
    "card": "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
    "kaspi": "üü° Kaspi Pay",
    "transfer": "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥",
    "unknown": "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"
}

# Status filtering for active/archive view
ACTIVE_STATUSES = [
    # Supabase statuses (–ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Bitrix)
    "new",              # –ù–æ–≤—ã–π (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –º—É—Å–æ—Ä–∞ –≤ API)
    "paid",             # –û–ø–ª–∞—á–µ–Ω
    "processing",       # –í –æ–±—Ä–∞–±–æ—Ç–∫–µ
    "confirmed",        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    "assembled",        # –°–æ–±—Ä–∞–Ω
    "ready_delivery",   # –ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ
    "ready_pickup",     # –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ
    "in_transit",       # –í –ø—É—Ç–∏ (–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è)
    "shipped",          # –û—Ç–≥—Ä—É–∂–µ–Ω
    "unpaid",           # –ù–µ –æ–ø–ª–∞—á–µ–Ω (–∂–¥–µ–º –æ–ø–ª–∞—Ç—É)
    "payment_error",    # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
    "problematic",      # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π
    "reassemble",       # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑
    "waiting_processing", # –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    "waiting_approval",   # –ñ–¥–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    "waiting_group_buy",  # –ñ–¥–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–∫—É–ø–∞
    "auction",           # –ê—É–∫—Ü–∏–æ–Ω
    "decide",            # –†–µ—à–∏—Ç—å
    
    # Kaspi —Å—Ç–∞—Ç—É—Å—ã
    "kaspi_waiting_qr",   # Kaspi –∂–¥–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR
    "kaspi_qr_scanned",   # Kaspi –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω QR, –∂–¥–µ–º –æ–ø–ª–∞—Ç—É
    "kaspi_paid",         # Kaspi –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω
    "kaspi_payment_error", # Kaspi –æ—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã
    
    # Cloudpayments —Å—Ç–∞—Ç—É—Å—ã
    "cloudpay_authorized", # Cloudpayments: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    "cloudpay_confirmed",  # Cloudpayments: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    
    # Bitrix codes that actually exist in DB (not transformed)
    "DE",   # –í –ø—É—Ç–∏ (exists as-is in DB for some orders)
]

ARCHIVE_STATUSES = [
    # Supabase statuses (–∞—Ä—Ö–∏–≤–Ω—ã–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
    "completed",           # –í—ã–ø–æ–ª–Ω–µ–Ω
    "cancelled",           # –û—Ç–º–µ–Ω–µ–Ω
    "refunded",           # –í–æ–∑–≤—Ä–∞—Ç
    "unrealized",         # –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
    "cloudpay_canceled",  # Cloudpayments: –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    "cloudpay_refunded",  # Cloudpayments: –í–æ–∑–≤—Ä–∞—Ç –æ–ø–ª–∞—Ç—ã
    
    # Bitrix codes (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    "F",    # –í—ã–ø–æ–ª–Ω–µ–Ω
    "UN",   # –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
    "RF",   # –í–æ–∑–≤—Ä–∞—Ç
    "ER",   # –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã (—É–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç CA)
    "AR",   # Cloudpayments: –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    "RR",   # Cloudpayments: –í–æ–∑–≤—Ä–∞—Ç –æ–ø–ª–∞—Ç—ã
]

# Status mapping for Bitrix synchronization
BITRIX_STATUS_MAPPING = {
    # Supabase ‚Üí Bitrix
    "new": "N",
    "paid": "PD", 
    "processing": "P",
    "completed": "F",
    "cancelled": "UN",
    "refunded": "RF",
    "accepted": "AP",
    "delivering": "DE",
    "assembled": "CO",
}

REVERSE_BITRIX_MAPPING = {
    # Bitrix ‚Üí Supabase  
    "N": "new",
    "PD": "paid",
    "P": "processing",
    "CO": "assembled", 
    "F": "completed",
    "UN": "cancelled",
    "RF": "refunded",
    "AP": "accepted",      # –ü—Ä–∏–Ω—è—Ç
    "DE": "delivering",    # –í –ø—É—Ç–∏ / –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
    "TR": "courier",       # –ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É
    "CF": "awaiting_payment", # –ñ–¥–µ–º –æ–ø–ª–∞—Ç—É
    "RO": "reassigned",    # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω
    "RD": "rescheduled",   # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω
    "CA": "cancelled",     # –û—Ç–º–µ–Ω–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π
    "ER": "payment_error", # –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã
    "KC": "partner",       # –£ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    "GP": "gift",          # –ü–æ–¥–∞—Ä–æ–∫
}

class Flower(BaseModel):
    """Flower dictionary model"""
    id: Optional[str] = None
    xml_id: str
    name: str
    name_en: Optional[str] = None
    quantity: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
    sort_order: int = 500
    is_active: bool = True
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

class ProductComposition(BaseModel):
    """Product composition item - links product to flower with quantity"""
    id: Optional[str] = None
    product_id: str
    flower_id: str
    flower_name: Optional[str] = None  # Denormalized for display
    amount: int = Field(..., gt=0)
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

class ProductCompositionRequest(BaseModel):
    """Request model for updating product composition"""
    flower_id: str
    amount: int = Field(..., gt=0)

class FlowerUpdateRequest(BaseModel):
    """Request model for updating flower data"""
    name: str = Field(..., min_length=1, max_length=255)
    name_en: Optional[str] = Field(None, max_length=255)
    sort_order: int = Field(default=500, ge=0, le=9999)
    is_active: bool = True

class FlowerMovement(BaseModel):
    """Flower inventory movement model"""
    id: Optional[str] = None
    flower_id: str
    flower_name: Optional[str] = None  # Denormalized for display
    movement_type: str = Field(..., description="delivery, writeoff, or order_usage")
    quantity: int = Field(..., gt=0)
    reason: Optional[str] = None
    note: Optional[str] = None
    delivery_date: Optional[str] = None  # For deliveries
    created_by: Optional[str] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

class FlowerDeliveryRequest(BaseModel):
    """Request model for adding flower delivery"""
    flower_id: str = Field(..., description="UUID of the flower")
    quantity: int = Field(..., gt=0, description="Number of flowers received")
    delivery_date: Optional[str] = Field(None, description="Date when flowers were received (YYYY-MM-DD)")
    reason: Optional[str] = Field(None, max_length=255, description="Reason for delivery")
    note: Optional[str] = Field(None, description="Additional notes")

class FlowerWriteoffRequest(BaseModel):
    """Request model for flower writeoff"""
    flower_id: str = Field(..., description="UUID of the flower")
    quantity: int = Field(..., gt=0, description="Number of flowers to writeoff")
    reason: str = Field(..., min_length=1, max_length=255, description="Reason for writeoff")
    note: Optional[str] = Field(None, description="Additional notes")