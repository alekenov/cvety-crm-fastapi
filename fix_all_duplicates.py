#!/usr/bin/env python3
"""
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤
–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
"""

from supabase import create_client
import os
from dotenv import load_dotenv
from collections import defaultdict

load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")

def aggressive_duplicate_removal():
    """–£–¥–∞–ª–∏—Ç—å –í–°–ï –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –≤–µ—Ä—Å–∏–∏"""
    
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    print("–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º...")
    result = supabase.table('sellers').select('id, name, description').execute()
    
    if not result.data:
        print("–ü—Ä–æ–¥–∞–≤—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)
    sellers_by_name = defaultdict(list)
    for seller in result.data:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        normalized_name = seller['name'].strip().lower()
        sellers_by_name[normalized_name].append(seller)
    
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: {len(sellers_by_name)}")
    
    total_to_delete = 0
    sellers_to_delete = []
    
    for normalized_name, sellers_list in sellers_by_name.items():
        if len(sellers_list) > 1:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            sellers_with_counts = []
            for seller in sellers_list:
                product_count = 0
                if seller.get('description') and '–¢–æ–≤–∞—Ä–æ–≤:' in seller.get('description', ''):
                    import re
                    match = re.search(r'–¢–æ–≤–∞—Ä–æ–≤: (\d+)', seller['description'])
                    if match:
                        product_count = int(match.group(1))
                
                sellers_with_counts.append({
                    **seller,
                    'product_count': product_count
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
            sellers_with_counts.sort(key=lambda x: x['product_count'], reverse=True)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º)
            keeper = sellers_with_counts[0]
            to_delete = sellers_with_counts[1:]
            
            if len(to_delete) > 0:
                print(f"\n'{seller['name']}': {len(sellers_list)} –∑–∞–ø–∏—Å–µ–π")
                print(f"  ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: {keeper['product_count']} —Ç–æ–≤–∞—Ä–æ–≤")
                
                for seller in to_delete:
                    print(f"  ‚ùå –£–¥–∞–ª—è–µ–º: {seller['product_count']} —Ç–æ–≤–∞—Ä–æ–≤")
                    sellers_to_delete.append(seller['id'])
                    total_to_delete += 1
    
    if sellers_to_delete:
        print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {total_to_delete} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        print("–£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
        
        deleted_count = 0
        for seller_id in sellers_to_delete:
            try:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                supabase.table('sellers')\
                    .delete()\
                    .eq('id', seller_id)\
                    .execute()
                
                deleted_count += 1
            except Exception as e:
                print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        
        print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    else:
        print("\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    result = supabase.table('sellers').select('id', count='exact').execute()
    total = result.count if hasattr(result, 'count') else 0
    print(f"\nüìä –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {total}")

if __name__ == "__main__":
    print("="*60)
    print("  –ê–ì–†–ï–°–°–ò–í–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –î–£–ë–õ–ò–ö–ê–¢–û–í")
    print("="*60)
    
    aggressive_duplicate_removal()
    
    print("\n" + "="*60)