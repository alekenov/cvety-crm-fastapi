#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""
import json
import glob

def load_benchmark_results():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–æ–≤"""
    files = glob.glob("benchmark_before_*.json")
    
    if len(files) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤")
        return None, None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    files.sort()
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏) –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π (–ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    with open(files[0], 'r') as f:
        before = json.load(f)
    
    with open(files[-1], 'r') as f:
        after = json.load(f)
    
    return before, after

def compare_results(before, after):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"""
    
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    tests = ['webhook', 'order_detail', 'orders_list']
    test_names = {
        'webhook': 'Webhook —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
        'order_detail': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–∞', 
        'orders_list': '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤'
    }
    
    improvements = []
    
    for test in tests:
        if test in before and test in after:
            before_avg = before[test].get('avg', 0)
            after_avg = after[test].get('avg', 0)
            
            if before_avg > 0 and after_avg > 0:
                improvement = ((before_avg - after_avg) / before_avg) * 100
                speed_ratio = before_avg / after_avg
                
                print(f"\nüîç {test_names[test]}:")
                print(f"  –î–æ:       {before_avg:.3f}s")
                print(f"  –ü–æ—Å–ª–µ:    {after_avg:.3f}s")
                
                if improvement > 0:
                    print(f"  ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}% (–≤ {speed_ratio:.2f}x –±—ã—Å—Ç—Ä–µ–µ)")
                else:
                    print(f"  ‚ö†Ô∏è  –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ: {abs(improvement):.1f}% (–≤ {1/speed_ratio:.2f}x –º–µ–¥–ª–µ–Ω–Ω–µ–µ)")
                
                improvements.append({
                    'test': test,
                    'improvement_percent': improvement,
                    'speed_ratio': speed_ratio
                })
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if improvements:
        avg_improvement = sum(imp['improvement_percent'] for imp in improvements) / len(improvements)
        avg_speed_ratio = sum(imp['speed_ratio'] for imp in improvements) / len(improvements)
        
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("‚îÄ" * 30)
        if avg_improvement > 0:
            print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {avg_improvement:.1f}%")
            print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ {avg_speed_ratio:.2f}x —Ä–∞–∑")
        else:
            print(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ: {abs(avg_improvement):.1f}%")
    
    return improvements

def show_optimizations():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüõ†Ô∏è –ü–†–ò–ú–ï–ù–ï–ù–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("‚îÄ" * 40)
    print("1. ‚úÖ N+1 Query Fix: Batch –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    print("   - –ó–∞–º–µ–Ω–∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ batch .in_('id', product_ids)")
    print("   - –°–Ω–∏–∑–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    print("2. ‚úÖ In-Memory –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("   - –î–æ–±–∞–≤–∏–ª–∏ SimpleCache —Å TTL = 5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    print("   - –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –¥–∞–Ω–Ω—ã–º")
    
    print("3. ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:")
    print("   - /cache/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞")
    print("   - /cache/clear - –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞")

if __name__ == "__main__":
    before, after = load_benchmark_results()
    
    if before and after:
        improvements = compare_results(before, after)
        show_optimizations()
        
        print(f"\nüéØ –í–´–í–û–î–´:")
        print("‚îÄ" * 20)
        if improvements:
            best_improvement = max(improvements, key=lambda x: x['improvement_percent'])
            if best_improvement['improvement_percent'] > 0:
                print(f"‚úÖ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_improvement['improvement_percent']:.1f}% —É–ª—É—á—à–µ–Ω–∏–µ")
                print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
            else:
                print("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   - –î–æ–±–∞–≤–∏—Ç—å Redis –¥–ª—è distributed –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å connection pooling –¥–ª—è Supabase")
        print("   - –î–æ–±–∞–≤–∏—Ç—å CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQL –∏–Ω–¥–µ–∫—Å—ã")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–æ–≤")