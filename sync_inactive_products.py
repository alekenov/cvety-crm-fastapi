#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ MySQL Bitrix –≤ Supabase
–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å ACTIVE='N' –≤ MySQL –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç is_active=false –≤ Supabase
"""

import mysql.connector
from supabase import create_client
import os
from dotenv import load_dotenv
from datetime import datetime
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL (–ª–æ–∫–∞–ª—å–Ω—ã–π Docker)
MYSQL_CONFIG = {
    'host': 'localhost',
    'port': 3306,
    'user': 'root',
    'password': 'cvety123',
    'database': 'cvety_db'
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")

def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def get_inactive_products_from_mysql():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ MySQL"""
    print_section("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ MySQL")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
        conn = mysql.connector.connect(**MYSQL_CONFIG)
        cursor = conn.cursor(dictionary=True)
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        query = """
        SELECT 
            e.ID as bitrix_id,
            e.NAME as name,
            e.ACTIVE,
            e.IBLOCK_ID,
            e.TIMESTAMP_X,
            e.DATE_CREATE
        FROM b_iblock_element e
        WHERE e.ACTIVE = 'N'
        AND e.IBLOCK_ID IN (
            SELECT ID FROM b_iblock 
            WHERE IBLOCK_TYPE_ID = 'catalog' 
            OR CODE = 'products'
        )
        ORDER BY e.ID
        """
        
        cursor.execute(query)
        inactive_products = cursor.fetchall()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(inactive_products)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ MySQL")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        if inactive_products:
            print("\n–ü—Ä–∏–º–µ—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
            for i, product in enumerate(inactive_products[:5]):
                print(f"  {i+1}. ID: {product['bitrix_id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}")
            if len(inactive_products) > 5:
                print(f"  ... –∏ –µ—â–µ {len(inactive_products) - 5} —Ç–æ–≤–∞—Ä–æ–≤")
        
        cursor.close()
        conn.close()
        
        return inactive_products
        
    except mysql.connector.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MySQL: {e}")
        return []

def sync_to_supabase(inactive_products):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤ Supabase"""
    print_section("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase")
    
    if not inactive_products:
        print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –°—á–µ—Ç—á–∏–∫–∏
        updated_count = 0
        not_found_count = 0
        already_inactive_count = 0
        error_count = 0
        
        print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é {len(inactive_products)} —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 50
        batch_size = 50
        for i in range(0, len(inactive_products), batch_size):
            batch = inactive_products[i:i + batch_size]
            bitrix_ids = [str(p['bitrix_id']) for p in batch]
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ Supabase –ø–æ bitrix_id –≤ metadata
                result = supabase.table('products')\
                    .select('id, name, is_active, metadata')\
                    .in_('metadata->>bitrix_id', bitrix_ids)\
                    .execute()
                
                if result.data:
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    supabase_products = {
                        str(p['metadata'].get('bitrix_id')): p 
                        for p in result.data 
                        if p.get('metadata', {}).get('bitrix_id')
                    }
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                    for mysql_product in batch:
                        bitrix_id = str(mysql_product['bitrix_id'])
                        
                        if bitrix_id in supabase_products:
                            sp_product = supabase_products[bitrix_id]
                            
                            if sp_product['is_active']:
                                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
                                update_result = supabase.table('products')\
                                    .update({'is_active': False, 'updated_at': 'now()'})\
                                    .eq('id', sp_product['id'])\
                                    .execute()
                                
                                if update_result.data:
                                    updated_count += 1
                                    if updated_count <= 10:
                                        print(f"  ‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {sp_product['name']}")
                                else:
                                    error_count += 1
                            else:
                                already_inactive_count += 1
                        else:
                            not_found_count += 1
                else:
                    not_found_count += len(batch)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (i + batch_size) % 200 == 0 or (i + batch_size) >= len(inactive_products):
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {min(i + batch_size, len(inactive_products))}/{len(inactive_products)}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞: {e}")
                error_count += len(batch)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print_section("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print(f"üìä –í—Å–µ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ MySQL: {len(inactive_products)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ Supabase: {updated_count}")
        print(f"‚è≠Ô∏è  –£–∂–µ –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã: {already_inactive_count}")
        print(f"‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Supabase: {not_found_count}")
        print(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {error_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        log_data = {
            'timestamp': datetime.now().isoformat(),
            'total_inactive_mysql': len(inactive_products),
            'updated_count': updated_count,
            'already_inactive': already_inactive_count,
            'not_found': not_found_count,
            'errors': error_count
        }
        
        log_file = f"sync_inactive_products_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(log_file, 'w') as f:
            json.dump(log_data, f, indent=2)
        
        print(f"\nüìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {log_file}")
        
        return updated_count > 0
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Supabase: {e}")
        return False

def verify_sync():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        active_result = supabase.table('products')\
            .select('id', count='exact')\
            .eq('is_active', True)\
            .execute()
        
        inactive_result = supabase.table('products')\
            .select('id', count='exact')\
            .eq('is_active', False)\
            .execute()
        
        active_count = active_result.count if hasattr(active_result, 'count') else len(active_result.data)
        inactive_count = inactive_result.count if hasattr(inactive_result, 'count') else len(inactive_result.data)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Supabase –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {active_count}")
        print(f"  ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {inactive_count}")
        print(f"  üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {active_count + inactive_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîÑ " * 20)
    print("  –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï–ê–ö–¢–ò–í–ù–´–• –¢–û–í–ê–†–û–í")
    print("  MySQL (Bitrix) ‚Üí Supabase")
    print("üîÑ " * 20)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL")
    try:
        conn = mysql.connector.connect(**MYSQL_CONFIG)
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ")
    except mysql.connector.Error as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL: {e}")
        print("‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   cd /Users/alekenov/cvety-local && docker-compose up -d")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    inactive_products = get_inactive_products_from_mysql()
    
    if inactive_products:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {len(inactive_products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ Supabase")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
        
        if response.lower() in ['yes', 'y', '–¥–∞']:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            success = sync_to_supabase(inactive_products)
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                verify_sync()
                print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("\n‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        else:
            print("\n‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        print("\n‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()