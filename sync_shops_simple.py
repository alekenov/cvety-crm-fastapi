#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è metadata
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç bitrix_id –≤ slug –≤ —Ñ–æ—Ä–º–∞—Ç–µ: shop-name-bitrixID
"""

import subprocess
from supabase import create_client
import os
from dotenv import load_dotenv
from datetime import datetime
import json
import re

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SSH –∏ MySQL
SSH_HOST = "root@185.125.90.141"
MYSQL_USER = "usercvety"
MYSQL_PASS = "QQlPCtTA@z2%mhy"
MYSQL_DB = "dbcvety"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SHOPS_IBLOCK_ID = 32
SELLER_PROPERTY_ID = 290

def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def execute_mysql_query(query):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å MySQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ SSH"""
    cmd = f'ssh {SSH_HOST} "export LANG=C; mysql -u {MYSQL_USER} -p\'{MYSQL_PASS}\' {MYSQL_DB} -N -e \\"{query}\\" 2>&1 | grep -v \\"warning: setlocale\\" | grep -v \\"Warning] Using a password\\""'
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            return result.stdout.strip()
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            cmd_alt = f'ssh {SSH_HOST} "export LANG=C; mysql -u {MYSQL_USER} -p\'{MYSQL_PASS}\' {MYSQL_DB} -N -e \\"{query}\\""'
            result_alt = subprocess.run(cmd_alt, shell=True, capture_output=True, text=True, timeout=30)
            if result_alt.returncode == 0:
                lines = result_alt.stdout.strip().split('\n')
                filtered_lines = [
                    line for line in lines 
                    if not ('warning: setlocale' in line or 'Warning] Using a password' in line)
                ]
                return '\n'.join(filtered_lines)
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None

def get_top_shops_from_mysql():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ MySQL"""
    print_section("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ MySQL")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    query = """
    SELECT 
        s.ID as shop_id,
        s.NAME as shop_name,
        s.CODE as shop_code,
        s.ACTIVE,
        COUNT(DISTINCT ep.IBLOCK_ELEMENT_ID) as product_count
    FROM b_iblock_element s
    LEFT JOIN b_iblock_element_property ep ON ep.VALUE = s.ID AND ep.IBLOCK_PROPERTY_ID = 290
    WHERE s.IBLOCK_ID = 32 
    AND s.ACTIVE = 'Y'
    GROUP BY s.ID, s.NAME, s.CODE, s.ACTIVE
    HAVING product_count > 0
    ORDER BY product_count DESC
    LIMIT 50
    """.replace('\n', ' ')
    
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø-50 –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏...")
    result = execute_mysql_query(query)
    
    if not result:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return []
    
    shops = []
    lines = result.split('\n')
    
    for line in lines:
        if line.strip():
            parts = line.split('\t')
            if len(parts) >= 5:
                shop = {
                    'bitrix_id': int(parts[0]) if parts[0].isdigit() else 0,
                    'name': parts[1],
                    'original_slug': parts[2] if parts[2] else None,
                    'ACTIVE': parts[3],
                    'product_count': int(parts[4]) if parts[4].isdigit() else 0
                }
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug —Å bitrix_id
                base_slug = shop['original_slug'] or re.sub(r'[^a-z0-9-]', '-', shop['name'].lower())
                shop['unique_slug'] = f"{base_slug}-bid{shop['bitrix_id']}"
                shops.append(shop)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
    
    if shops:
        print("\nüìä –¢–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, shop in enumerate(shops[:10], 1):
            print(f"  {i}. {shop['name']} (ID: {shop['bitrix_id']}, –¢–æ–≤–∞—Ä–æ–≤: {shop['product_count']})")
    
    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤
    query2 = """
    SELECT ID, NAME, CODE, ACTIVE
    FROM b_iblock_element
    WHERE IBLOCK_ID = 32 
    AND ACTIVE = 'Y'
    AND ID NOT IN (
        SELECT DISTINCT s.ID
        FROM b_iblock_element s
        JOIN b_iblock_element_property ep ON ep.VALUE = s.ID AND ep.IBLOCK_PROPERTY_ID = 290
        WHERE s.IBLOCK_ID = 32
    )
    ORDER BY NAME
    LIMIT 150
    """.replace('\n', ' ')
    
    print("\n–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã...")
    result2 = execute_mysql_query(query2)
    
    if result2:
        lines2 = result2.split('\n')
        count_without_products = 0
        
        for line in lines2:
            if line.strip():
                parts = line.split('\t')
                if len(parts) >= 4:
                    shop = {
                        'bitrix_id': int(parts[0]) if parts[0].isdigit() else 0,
                        'name': parts[1],
                        'original_slug': parts[2] if parts[2] else None,
                        'ACTIVE': parts[3],
                        'product_count': 0
                    }
                    base_slug = shop['original_slug'] or re.sub(r'[^a-z0-9-]', '-', shop['name'].lower())
                    shop['unique_slug'] = f"{base_slug}-bid{shop['bitrix_id']}"
                    shops.append(shop)
                    count_without_products += 1
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {count_without_products} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤")
    
    print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(shops)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
    
    return shops

def clear_test_shops(supabase):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"""
    print_section("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        result = supabase.table('sellers').select('id, name').execute()
        
        if result.data:
            emoji_chars = ['üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ', 'üíê', 'üè™', 'üéÅ', 'üåº', 'üåµ']
            test_sellers = [
                s for s in result.data 
                if any(char in s['name'] for char in emoji_chars)
            ]
            
            if test_sellers:
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(test_sellers)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                
                for seller in test_sellers[:5]:
                    try:
                        # –û–±–Ω—É–ª—è–µ–º —Å–≤—è–∑–∏
                        supabase.table('products')\
                            .update({'seller_id': None, 'seller_name': None})\
                            .eq('seller_id', seller['id'])\
                            .execute()
                        
                        # –£–¥–∞–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
                        supabase.table('sellers')\
                            .delete()\
                            .eq('id', seller['id'])\
                            .execute()
                        
                        print(f"  ‚ùå –£–¥–∞–ª–µ–Ω: {seller['name']}")
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")
                
                if len(test_sellers) > 5:
                    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç–æ–º
                    for seller in test_sellers[5:]:
                        try:
                            supabase.table('sellers').delete().eq('id', seller['id']).execute()
                        except:
                            pass
                    print(f"  ... –∏ –µ—â–µ {len(test_sellers) - 5} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(test_sellers)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            else:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return False

def extract_bitrix_id_from_slug(slug):
    """–ò–∑–≤–ª–µ—á—å bitrix_id –∏–∑ slug —Ñ–æ—Ä–º–∞—Ç–∞ name-bidXXX"""
    if slug and '-bid' in slug:
        match = re.search(r'-bid(\d+)$', slug)
        if match:
            return int(match.group(1))
    return None

def sync_shops_to_supabase(mysql_shops):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –≤ Supabase"""
    print_section("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase")
    
    if not mysql_shops:
        print("‚ùå –ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return False
    
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        clear_test_shops(supabase)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã
        existing_result = supabase.table('sellers').select('id, name, slug').execute()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ bitrix_id –∏–∑ slug
        existing_shops = {}
        if existing_result.data:
            for shop in existing_result.data:
                bitrix_id = extract_bitrix_id_from_slug(shop.get('slug'))
                if bitrix_id:
                    existing_shops[str(bitrix_id)] = shop
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {len(existing_shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        
        created_count = 0
        updated_count = 0
        error_count = 0
        
        print(f"\n–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º {len(mysql_shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤...")
        
        for shop in mysql_shops:
            try:
                bitrix_id = str(shop['bitrix_id'])
                
                # –î–∞–Ω–Ω—ã–µ –¥–ª—è Supabase
                shop_data = {
                    'name': shop['name'],
                    'slug': shop['unique_slug'],  # –°–æ–¥–µ—Ä–∂–∏—Ç bitrix_id
                    'description': f"Bitrix ID: {shop['bitrix_id']}, –¢–æ–≤–∞—Ä–æ–≤: {shop['product_count']}",
                    'is_active': shop['ACTIVE'] == 'Y'
                }
                
                if bitrix_id in existing_shops:
                    # –û–±–Ω–æ–≤–ª—è–µ–º
                    result = supabase.table('sellers')\
                        .update(shop_data)\
                        .eq('id', existing_shops[bitrix_id]['id'])\
                        .execute()
                    
                    if result.data:
                        updated_count += 1
                        if updated_count <= 3:
                            print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {shop['name']}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    result = supabase.table('sellers')\
                        .insert(shop_data)\
                        .execute()
                    
                    if result.data:
                        created_count += 1
                        if created_count <= 5:
                            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {shop['name']} ({shop['product_count']} —Ç–æ–≤–∞—Ä–æ–≤)")
                
            except Exception as e:
                error_count += 1
                if error_count <= 3:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {shop['name']}: {e}")
        
        print_section("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print(f"üìä –í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {len(mysql_shops)}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {created_count}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        log_data = {
            'timestamp': datetime.now().isoformat(),
            'total': len(mysql_shops),
            'created': created_count,
            'updated': updated_count,
            'errors': error_count,
            'top_shops': [
                {
                    'name': s['name'],
                    'bitrix_id': s['bitrix_id'],
                    'product_count': s['product_count']
                }
                for s in sorted(mysql_shops, key=lambda x: x['product_count'], reverse=True)[:20]
            ]
        }
        
        with open(f"sync_shops_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json", 'w', encoding='utf-8') as f:
            json.dump(log_data, f, ensure_ascii=False, indent=2)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def verify_sync():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã
        result = supabase.table('sellers')\
            .select('id, name, slug, is_active')\
            .order('name')\
            .limit(200)\
            .execute()
        
        if result.data:
            active = [s for s in result.data if s.get('is_active')]
            
            print(f"üìä –í Supabase:")
            print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active)}")
            print(f"  üì¶ –í—Å–µ–≥–æ: {len(result.data)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å bitrix_id
            print("\nüìä –ü—Ä–∏–º–µ—Ä—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤:")
            for i, shop in enumerate(result.data[:10], 1):
                bitrix_id = extract_bitrix_id_from_slug(shop.get('slug'))
                status = "‚úÖ" if shop.get('is_active') else "‚ùå"
                print(f"  {i}. {shop['name']} (Bitrix ID: {bitrix_id}) {status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
            known_shops = ['Cvetykz', 'FLOVER', '–û—Ä–∞–Ω–∂', 'Eileen flowers', 'ArtDi Flowers']
            print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤:")
            for shop_name in known_shops:
                found = any(shop_name.lower() in s['name'].lower() for s in result.data)
                if found:
                    print(f"  ‚úÖ {shop_name} - –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"  ‚ùå {shop_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîÑ " * 20)
    print("  –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ê–ì–ê–ó–ò–ù–û–í")
    print("  MySQL ‚Üí Supabase (–±–µ–∑ metadata)")
    print("üîÑ " * 20)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    test_result = execute_mysql_query("SELECT VERSION()")
    if test_result:
        print(f"‚úÖ SSH/MySQL: {test_result}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
    if not SUPABASE_URL or not SUPABASE_KEY:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    print("‚úÖ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã
    mysql_shops = get_top_shops_from_mysql()
    
    if mysql_shops:
        print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(mysql_shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        print("–≠—Ç–æ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏!")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
        
        if response.lower() in ['yes', 'y', '–¥–∞']:
            if sync_shops_to_supabase(mysql_shops):
                verify_sync()
                print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            else:
                print("\n‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        else:
            print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()