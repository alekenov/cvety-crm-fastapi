#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ dashboard –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import json
import requests
from datetime import datetime, timedelta
from supabase import create_client, Client
from dotenv import load_dotenv

load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY")

class SyncMonitoringDashboard:
    def __init__(self):
        self.supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
    
    def check_fastapi_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get("http://localhost:8001/health", timeout=5)
            return {"status": "healthy", "code": response.status_code}
        except:
            try:
                # –ü—Ä–æ–±—É–µ–º webhook endpoint
                response = requests.post("http://localhost:8001/webhooks/bitrix/order", 
                                       json={"test": True}, timeout=5)
                return {"status": "webhook_accessible", "code": response.status_code}
            except:
                return {"status": "down", "code": None}
    
    def check_supabase_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
        try:
            result = self.supabase.table('orders').select('id').limit(1).execute()
            return {"status": "connected", "data_available": len(result.data) > 0}
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def get_sync_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = (datetime.now() - timedelta(days=1)).isoformat()
            
            result = self.supabase.rpc('get_sync_stats', {
                'since_time': yesterday
            }).execute()
            
            if result.data:
                return result.data[0]
            else:
                # Fallback - –ø—Ä–æ—Å—Ç—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
                total_orders = self.supabase.table('orders').select('id', count='exact').execute()
                recent_orders = self.supabase.table('orders').select('id', count='exact')\
                    .gte('created_at', yesterday).execute()
                
                return {
                    'total_orders': total_orders.count,
                    'recent_orders': recent_orders.count,
                    'sync_success_rate': 'N/A'
                }
                
        except Exception as e:
            return {"error": str(e)}
    
    def check_production_webhook_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ production webhook"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ webhook –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            import subprocess
            result = subprocess.run([
                'ssh', 'root@185.125.90.141', 
                'tail -n 5 /tmp/bitrix_webhook.log 2>/dev/null || echo "No logs"'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                return {"status": "accessible", "recent_logs": result.stdout.strip()}
            else:
                return {"status": "ssh_error", "error": result.stderr}
        except:
            return {"status": "unknown", "note": "Cannot access production logs"}
    
    def check_reverse_sync_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ cron
            if os.path.exists('/tmp/reverse_sync_cron.log'):
                with open('/tmp/reverse_sync_cron.log', 'r') as f:
                    lines = f.readlines()
                    last_lines = ''.join(lines[-3:]) if lines else "No logs"
                return {"status": "active", "recent_logs": last_lines}
            else:
                return {"status": "no_logs", "note": "Cron logs not found"}
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def display_dashboard(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ dashboard"""
        print("üöÄ –°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò - MONITORING DASHBOARD")
        print("=" * 60)
        print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # FastAPI Status
        print("üîß FASTAPI SERVER:")
        fastapi_status = self.check_fastapi_status()
        if fastapi_status["status"] == "healthy":
            print("  ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω)")
        elif fastapi_status["status"] == "webhook_accessible":
            print("  ‚ö†Ô∏è Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω (Health endpoint –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        else:
            print("  ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print()
        
        # Supabase Status
        print("üóÑÔ∏è SUPABASE DATABASE:")
        supabase_status = self.check_supabase_connection()
        if supabase_status["status"] == "connected":
            print("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
            if supabase_status["data_available"]:
                print("  ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {supabase_status.get('error', 'Unknown')}")
        print()
        
        # Sync Statistics
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
        stats = self.get_sync_statistics()
        if 'error' not in stats:
            print(f"  üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats.get('total_orders', 'N/A')}")
            print(f"  üïê –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: {stats.get('recent_orders', 'N/A')}")
            print(f"  ‚úÖ Success rate: {stats.get('sync_success_rate', 'N/A')}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
        print()
        
        # Production Webhook Status
        print("üåê PRODUCTION WEBHOOK:")
        webhook_status = self.check_production_webhook_status()
        if webhook_status["status"] == "accessible":
            print("  ‚úÖ Webhook —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
            if webhook_status.get("recent_logs"):
                print("  üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
                for line in webhook_status["recent_logs"].split('\n')[-2:]:
                    if line.strip():
                        print(f"    {line}")
        else:
            print(f"  ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {webhook_status['status']}")
        print()
        
        # Reverse Sync Status
        print("üîÑ –û–ë–†–ê–¢–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø:")
        reverse_status = self.check_reverse_sync_status()
        if reverse_status["status"] == "active":
            print("  ‚úÖ Cron job –∞–∫—Ç–∏–≤–µ–Ω")
            if reverse_status.get("recent_logs"):
                print("  üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
                for line in reverse_status["recent_logs"].split('\n')[-2:]:
                    if line.strip():
                        print(f"    {line}")
        else:
            print(f"  ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {reverse_status['status']}")
        print()
        
        # System Health Summary
        print("üéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
        all_healthy = (
            fastapi_status["status"] in ["healthy", "webhook_accessible"] and
            supabase_status["status"] == "connected" and
            webhook_status["status"] == "accessible" and
            reverse_status["status"] == "active"
        )
        
        if all_healthy:
            print("  üü¢ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢")
            print("  ‚úÖ Bidirectional —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ production")
        else:
            print("  üü° –ß–ê–°–¢–ò–ß–ù–ê–Ø –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–¨")
            print("  ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        print("=" * 60)
    
    def check_sync_health(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
        
        Returns:
            dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            one_hour_ago = (datetime.now() - timedelta(hours=1)).isoformat()
            
            # –û–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            result = self.supabase.table('sync_log')\
                .select('status', count='exact')\
                .gte('created_at', one_hour_ago)\
                .execute()
            
            total_syncs = result.count
            
            # –û—à–∏–±–∫–∏ –∑–∞ —á–∞—Å
            errors_result = self.supabase.table('sync_log')\
                .select('*', count='exact')\
                .eq('status', 'error')\
                .gte('created_at', one_hour_ago)\
                .execute()
            
            errors_count = errors_result.count
            
            # –û—à–∏–±–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –∑–∞ —á–∞—Å
            date_errors_result = self.supabase.table('sync_log')\
                .select('*', count='exact')\
                .eq('status', 'error')\
                .like('error_message', '%date/time field value out of range%')\
                .gte('created_at', one_hour_ago)\
                .execute()
            
            date_errors_count = date_errors_result.count
            
            # –í—ã—á–∏—Å–ª—è–µ–º success rate
            success_rate = 0
            if total_syncs > 0:
                success_count = total_syncs - errors_count
                success_rate = (success_count / total_syncs) * 100
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            critical_errors = self.supabase.table('sync_log')\
                .select('*')\
                .eq('status', 'error')\
                .gte('created_at', one_hour_ago)\
                .order('created_at', desc=True)\
                .limit(3)\
                .execute()
            
            return {
                'timestamp': datetime.now().isoformat(),
                'total_syncs_last_hour': total_syncs,
                'errors_last_hour': errors_count,
                'date_errors_last_hour': date_errors_count,
                'success_rate': success_rate,
                'is_healthy': success_rate >= 95 and errors_count < 10,
                'critical_errors': critical_errors.data,
                'status': 'healthy' if success_rate >= 95 and errors_count < 10 else 'degraded'
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'status': 'error',
                'is_healthy': False
            }
    
    async def send_health_alert(self, health_metrics: dict):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ Telegram –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        
        Args:
            health_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            from telegram_notifier import get_notifier
            
            notifier = get_notifier()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç
            if health_metrics.get('is_healthy', False):
                return  # –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–ª–µ—Ä—Ç–µ
            success_rate = health_metrics.get('success_rate', 0)
            errors_count = health_metrics.get('errors_last_hour', 0)
            date_errors = health_metrics.get('date_errors_last_hour', 0)
            
            message = f"üö® <b>–ê–õ–ï–†–¢: –ü—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
            message += f"üìä Success rate –∑–∞ —á–∞—Å: {success_rate:.1f}%\n"
            message += f"‚ùå –û—à–∏–±–æ–∫ –∑–∞ —á–∞—Å: {errors_count}\n"
            
            if date_errors > 0:
                message += f"üìÖ –û—à–∏–±–∫–∏ —Å –¥–∞—Ç–∞–º–∏: {date_errors}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            critical_errors = health_metrics.get('critical_errors', [])
            if critical_errors:
                message += f"\n‚ö†Ô∏è <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n"
                for i, error in enumerate(critical_errors[:2], 1):
                    error_msg = error.get('error_message', 'Unknown error')[:100]
                    message += f"{i}. <code>{error_msg}...</code>\n"
            
            message += f"\nüïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            message += f"\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ fix_sync_errors.py –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∞–ª–µ—Ä—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö
            users = await notifier._get_active_users('errors_only')
            
            sent_count = 0
            for user in users:
                if await notifier._send_message(user['chat_id'], message):
                    sent_count += 1
            
            print(f"üì§ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def run_health_check(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —Å –∞–ª–µ—Ä—Ç–∞–º–∏
        """
        print("\nüè• –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        health = self.check_sync_health()
        
        print(f"üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π –∑–∞ —á–∞—Å: {health.get('total_syncs_last_hour', 0)}")
        print(f"‚ùå –û—à–∏–±–æ–∫ –∑–∞ —á–∞—Å: {health.get('errors_last_hour', 0)}")
        print(f"üìÖ –û—à–∏–±–∫–∏ –¥–∞—Ç –∑–∞ —á–∞—Å: {health.get('date_errors_last_hour', 0)}")
        print(f"‚úÖ Success rate: {health.get('success_rate', 0):.1f}%")
        
        status = health.get('status', 'unknown')
        if status == 'healthy':
            print(f"üü¢ –°—Ç–∞—Ç—É—Å: –°–ò–°–¢–ï–ú–ê –ó–î–û–†–û–í–ê")
        elif status == 'degraded':
            print(f"üü° –°—Ç–∞—Ç—É—Å: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –°–ù–ò–ñ–ï–ù–ê") 
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å: python3 fix_sync_errors.py")
        else:
            print(f"üî¥ –°—Ç–∞—Ç—É—Å: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        if not health.get('is_healthy', False):
            try:
                import asyncio
                asyncio.create_task(self.send_health_alert(health))
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç: {e}")
        
        print("=" * 40)
        
        return health

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ dashboard –∏–ª–∏ health check"""
    import sys
    
    dashboard = SyncMonitoringDashboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if '--health' in sys.argv:
        dashboard.run_health_check()
    else:
        dashboard.display_dashboard()

if __name__ == "__main__":
    main()