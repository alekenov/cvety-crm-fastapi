#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ production MySQL –≤ Supabase
"""

import os
import sys
import pymysql
import uuid
from datetime import datetime
from supabase import create_client, Client
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PRODUCTION_MYSQL = {
    'host': '185.125.90.141',
    'user': 'usercvety',
    'password': 'QQlPCtTA@z2%mhy',
    'database': 'dbcvety',
    'charset': 'utf8mb4'
}

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY")

def connect_to_production():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ production MySQL"""
    try:
        connection = pymysql.connect(
            **PRODUCTION_MYSQL,
            cursorclass=pymysql.cursors.DictCursor
        )
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ production MySQL")
        return connection
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ production MySQL: {e}")
        return None

def connect_to_supabase():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Supabase")
        return supabase
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return None

def get_missing_users(connection, user_ids):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ production"""
    try:
        with connection.cursor() as cursor:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
            ids_str = ','.join(map(str, user_ids))
            
            query = f"""
            SELECT 
                ID,
                LOGIN,
                EMAIL,
                NAME,
                LAST_NAME,
                PERSONAL_PHONE,
                DATE_REGISTER,
                LAST_LOGIN,
                ACTIVE
            FROM b_user
            WHERE ID IN ({ids_str})
            """
            
            cursor.execute(query)
            users = cursor.fetchall()
            
            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ production: {len(users)}")
            return users
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def transform_user_data(mysql_user):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MySQL –≤ —Ñ–æ—Ä–º–∞—Ç Supabase"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    name_parts = []
    if mysql_user.get('NAME'):
        name_parts.append(mysql_user['NAME'])
    if mysql_user.get('LAST_NAME'):
        name_parts.append(mysql_user['LAST_NAME'])
    
    full_name = ' '.join(name_parts) if name_parts else mysql_user.get('LOGIN', f"User {mysql_user['ID']}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    created_at = None
    if mysql_user.get('DATE_REGISTER'):
        if isinstance(mysql_user['DATE_REGISTER'], datetime):
            created_at = mysql_user['DATE_REGISTER'].isoformat()
        else:
            created_at = str(mysql_user['DATE_REGISTER'])
    else:
        created_at = datetime.utcnow().isoformat()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∏–Ω–∞
    last_login = None
    if mysql_user.get('LAST_LOGIN'):
        if isinstance(mysql_user['LAST_LOGIN'], datetime):
            last_login = mysql_user['LAST_LOGIN'].isoformat()
        else:
            last_login = str(mysql_user['LAST_LOGIN'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Supabase
    supabase_user = {
        'id': str(uuid.uuid4()),  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID
        'bitrix_user_id': int(mysql_user['ID']),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
        'email': mysql_user.get('EMAIL'),
        'phone': mysql_user.get('PERSONAL_PHONE'),
        'name': full_name,
        'is_active': mysql_user.get('ACTIVE') == 'Y',
        'created_at': created_at,
        'last_login': last_login,
    }
    
    return supabase_user

def import_users_to_supabase(supabase, users_data):
    """–ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase"""
    success_count = 0
    error_count = 0
    
    for user_data in users_data:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing = supabase.table('users').select('id').eq('bitrix_user_id', user_data['bitrix_user_id']).execute()
            
            if existing.data:
                print(f"  ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['bitrix_user_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = supabase.table('users').insert(user_data).execute()
            
            if result.data:
                print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['bitrix_user_id']} ({user_data['name']}) –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                success_count += 1
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['bitrix_user_id']}")
                error_count += 1
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['bitrix_user_id']}: {e}")
            error_count += 1
    
    return success_count, error_count

def main():
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 60)
    
    # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤
    missing_user_ids = [171532, 171533, 171534, 171535]
    
    if len(sys.argv) > 1:
        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ID –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        additional_ids = [int(uid) for uid in sys.argv[1:]]
        missing_user_ids.extend(additional_ids)
        missing_user_ids = list(set(missing_user_ids))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    print(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {missing_user_ids}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    mysql_conn = connect_to_production()
    if not mysql_conn:
        return
    
    supabase = connect_to_supabase()
    if not supabase:
        mysql_conn.close()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ production
        print("\nüì• –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ production MySQL...")
        users_data = get_missing_users(mysql_conn, missing_user_ids)
        
        if not users_data:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
        supabase_users = []
        for mysql_user in users_data:
            supabase_user = transform_user_data(mysql_user)
            supabase_users.append(supabase_user)
            print(f"  ‚Ä¢ {mysql_user['ID']}: {supabase_user['name']} ({supabase_user['email']})")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Supabase
        print(f"\nüì§ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(supabase_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase...")
        success_count, error_count = import_users_to_supabase(supabase, supabase_users)
        
        print(f"\n" + "=" * 60)
        print(f"üìä –ò–¢–û–ì–ò –ò–ú–ü–û–†–¢–ê:")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"  üìç –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(supabase_users)}")
        
        if success_count > 0:
            print(f"\nüéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤.")
        
    finally:
        mysql_conn.close()
        print("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

if __name__ == "__main__":
    main()