#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'
–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π —Å 'new' –Ω–∞ 'completed'
"""

import os
import sys
from datetime import datetime, timedelta
from supabase import create_client, Client
from config import config as app_config

def get_supabase() -> Client:
    """Get Supabase client"""
    url = app_config.SUPABASE_URL
    key = app_config.SUPABASE_ANON_KEY
    return create_client(url, key)

def cleanup_old_new_orders():
    """
    –ù–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' –Ω–∞ 'completed'
    """
    db = get_supabase()
    
    # –î–∞—Ç–∞ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    thirty_days_ago = datetime.now() - timedelta(days=30)
    cutoff_date = thirty_days_ago.isoformat()
    
    print(f"üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' —Å—Ç–∞—Ä—à–µ {thirty_days_ago.strftime('%Y-%m-%d')}...")
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'
    result = db.table('orders')\
        .select('id, order_number, status, created_at, total_amount')\
        .eq('status', 'new')\
        .lt('created_at', cutoff_date)\
        .execute()
    
    if not result.data:
        print("‚úÖ –°—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    old_orders = result.data
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(old_orders)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    for order in old_orders[:10]:
        order_num = order.get('order_number', f"Order #{order['id'][:8]}")
        created = order.get('created_at', 'Unknown')[:10]
        amount = order.get('total_amount', 0)
        print(f"  ‚Ä¢ {order_num} - {created} - {amount}‚Ç∏")
    
    if len(old_orders) > 10:
        print(f"  ... –∏ –µ—â–µ {len(old_orders) - 10} –∑–∞–∫–∞–∑–æ–≤")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(old_orders)} –∑–∞–∫–∞–∑–æ–≤ —Å 'new' ‚Üí 'completed'")
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").lower().strip()
    
    if confirm not in ['yes', 'y', '–¥–∞', '–¥']:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 100
    batch_size = 100
    updated_count = 0
    
    for i in range(0, len(old_orders), batch_size):
        batch = old_orders[i:i + batch_size]
        order_ids = [order['id'] for order in batch]
        
        print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1} ({len(batch)} –∑–∞–∫–∞–∑–æ–≤)...")
        
        try:
            update_result = db.table('orders')\
                .update({'status': 'completed'})\
                .in_('id', order_ids)\
                .execute()
            
            if update_result.data:
                updated_count += len(update_result.data)
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(update_result.data)} –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ")
            else:
                print(f"‚ö†Ô∏è  –ü–∞–∫–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞: {e}")
            continue
    
    print(f"\nüéâ –ó–ê–í–ï–†–®–ï–ù–û! –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–∫–∞–∑–æ–≤ —Å 'new' ‚Üí 'completed'")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    check_result = db.table('orders')\
        .select('status', count='exact')\
        .eq('status', 'new')\
        .lt('created_at', cutoff_date)\
        .execute()
    
    remaining_old_new = check_result.count or 0
    if remaining_old_new == 0:
        print("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {remaining_old_new} —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'")

def show_current_status_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤"""
    db = get_supabase()
    
    print("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤:")
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    result = db.table('orders')\
        .select('status')\
        .execute()
    
    if result.data:
        status_counts = {}
        for order in result.data:
            status = order['status']
            status_counts[status] = status_counts.get(status, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_statuses = sorted(status_counts.items(), key=lambda x: x[1], reverse=True)
        
        for status, count in sorted_statuses:
            print(f"  {status}: {count:,} –∑–∞–∫–∞–∑–æ–≤")
        
        print(f"\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(result.data):,}")

if __name__ == "__main__":
    print("üßπ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    show_current_status_stats()
    
    print("\n" + "=" * 50)
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
    cleanup_old_new_orders()