#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
N ‚Üí AP ‚Üí PD ‚Üí CO ‚Üí RD ‚Üí DE ‚Üí F

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
"""

import requests
import json
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_URL = "http://localhost:8001/webhooks/bitrix/order"
WEBHOOK_TOKEN = "fad5fbe4c8a520cf6d5453685b758c7fd9f6681f084be335fcdcd190ad9aaa0e"

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ORDER_STATUSES = [
    ("N", "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑"),
    ("AP", "–ü—Ä–∏–Ω—è—Ç –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é"),
    ("PD", "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"),
    ("CO", "–í—ã–ø–æ–ª–Ω–µ–Ω"),
    ("RD", "–í–æ–∑–≤—Ä–∞—Ç"),
    ("DE", "–û—Ç–∫–ª–æ–Ω–µ–Ω"),
    ("F", "–ó–∞–≤–µ—Ä—à–µ–Ω")
]

def create_test_order():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤"""
    timestamp = int(time.time())
    test_order_id = timestamp + 900000  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    test_user_id = timestamp
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–∫–∞–∑
    payload = {
        "event": "order.create",
        "token": WEBHOOK_TOKEN,
        "data": {
            "ID": str(test_order_id),
            "ACCOUNT_NUMBER": str(test_order_id),
            "STATUS_ID": "N",
            "PRICE": "5000.0000",
            "PRICE_DELIVERY": "1000.0000", 
            "USER_ID": str(test_user_id),
            "PAYED": "N",
            "DATE_INSERT": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "PAY_SYSTEM_ID": "10",
            "USER_DESCRIPTION": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤",
            "properties": {
                "phone": "+77777777888",
                "email": "status_test@example.com",
                "nameRecipient": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–µ—Å—Ç–æ–≤—ã—Ö –°—Ç–∞—Ç—É—Å–æ–≤",
                "phoneRecipient": "+77777777889",
                "addressRecipient": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, —É–ª. –°—Ç–∞—Ç—É—Å–Ω–∞—è, –¥. 5",
                "data": "2025-08-23",
                "postcardText": "üîÑ –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞",
                "city": "2",
                "when": "27",
                "SOURCE_ORDER": "status_test",
                "shopId": "17008"
            },
            "basket": [
                {
                    "ID": f"{test_order_id}1",
                    "PRODUCT_ID": "595099",  # –ë–µ–ª–æ—Å–Ω–µ–∂–Ω—ã–π –±—É–∫–µ—Ç
                    "NAME": "–ë–µ–ª–æ—Å–Ω–µ–∂–Ω—ã–π –±—É–∫–µ—Ç (—Ç–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–æ–≤)",
                    "PRICE": "5000.0000",
                    "QUANTITY": "1.0000",
                    "CURRENCY": "KZT"
                }
            ],
            "user": {
                "ID": str(test_user_id),
                "phone": "+77777777888",
                "email": "status_test@example.com"
            },
            "webhook_source": "status_test_create",
            "webhook_timestamp": datetime.now().isoformat()
        }
    }
    
    print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ {test_order_id} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤...")
    
    try:
        response = requests.post(WEBHOOK_URL, json=payload, headers={'Content-Type': 'application/json'}, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {result}")
            return test_order_id, result.get('order_id')
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.status_code} - {response.text}")
            return None, None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return None, None

def change_order_status(bitrix_order_id, new_status, status_name):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    payload = {
        "event": "order.status_change", 
        "token": WEBHOOK_TOKEN,
        "data": {
            "ID": str(bitrix_order_id),
            "STATUS_ID": new_status,
            "DATE_STATUS": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "PRICE": "5000.0000",
            "USER_DESCRIPTION": f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_name}",
            "webhook_source": "status_test_change",
            "webhook_timestamp": datetime.now().isoformat()
        }
    }
    
    print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {bitrix_order_id}: {new_status} ({status_name})")
    
    try:
        response = requests.post(WEBHOOK_URL, json=payload, headers={'Content-Type': 'application/json'}, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {result}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def test_order_status_changes():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í –ó–ê–ö–ê–ó–û–í")
    print("=" * 60)
    print("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: N ‚Üí AP ‚Üí PD ‚Üí CO ‚Üí RD ‚Üí DE ‚Üí F")
    print("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FastAPI
    try:
        response = requests.get("http://localhost:8001/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ HTTP 200")
    except:
        print("‚ùå FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ localhost:8001")
        return
    
    # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    bitrix_order_id, supabase_order_id = create_test_order()
    if not bitrix_order_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑")
        return
    
    print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:")
    print(f"   ‚Ä¢ Bitrix Order ID: {bitrix_order_id}")
    print(f"   ‚Ä¢ Supabase Order ID: {supabase_order_id}")
    print("")
    
    # –®–∞–≥ 2: –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç–∞—Ç—É—Å–∞–º (–∫—Ä–æ–º–µ N, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    for status_code, status_name in ORDER_STATUSES[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º N
        print(f"üîÑ –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞: {status_code} ({status_name})")
        
        success = change_order_status(bitrix_order_id, status_code, status_name)
        
        if success:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å {status_code} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {status_code}")
            
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        print("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
        time.sleep(3)
        print("")
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚Ä¢ –ó–∞–∫–∞–∑: {bitrix_order_id}")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(ORDER_STATUSES)} —à—Ç")
    print(f"   ‚Ä¢ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: F (–ó–∞–≤–µ—Ä—à–µ–Ω)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤...")
    print("    –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—ç—Ç–∞–ø–Ω–æ")
    print("    –æ—Ç '–ù–æ–≤—ã–π' –¥–æ '–ó–∞–≤–µ—Ä—à–µ–Ω' —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã\n")
    
    test_order_status_changes()

if __name__ == "__main__":
    main()