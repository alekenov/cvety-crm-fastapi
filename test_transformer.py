#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Bitrix –≤ Supabase —Ñ–æ—Ä–º–∞—Ç
"""

from core.transformer import OptimizedTransformer
from datetime import datetime

def test_transformer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    print("üîÑ –§–ê–ó–ê 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    print()
    
    transformer = OptimizedTransformer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏–∑ Bitrix
    test_order = {
        'ID': 122118,
        'STATUS_ID': 'N',  # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
        'DATE_INSERT': '22.08.2025 14:30:00',
        'PRICE': '15000.00',
        'USER_ID': 1079,
        'PHONE': '+77015211545',
        'EMAIL': 'test@example.com',
        'DELIVERY_ADDRESS': '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è 150/1, –∫–≤. 25',
        'COMMENT': '–î–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ 18:00, –∑–≤–æ–Ω–∏—Ç—å –∑–∞ —á–∞—Å',
        'PAYMENT_ID': 'kaspi',
        'PAYMENT_STATUS': 'Y'
    }
    
    print("üì• –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Bitrix —Ñ–æ—Ä–º–∞—Ç):")
    for key, value in test_order.items():
        print(f"   {key}: {value}")
    
    print()
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    try:
        result = transformer.transform_bitrix_to_supabase(test_order)
        
        print("üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (Supabase —Ñ–æ—Ä–º–∞—Ç):")
        for key, value in result.items():
            if isinstance(value, str) and len(value) > 50:
                print(f"   {key}: {value[:47]}...")
            else:
                print(f"   {key}: {value}")
                
        print()
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   ‚úì –°—Ç–∞—Ç—É—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω: {test_order['STATUS_ID']} ‚Üí {result['status']}")
        print(f"   ‚úì –î–∞—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞: {test_order['DATE_INSERT']} ‚Üí {result['created_at']}")
        print(f"   ‚úì ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result['bitrix_order_id']} = {test_order['ID']}")
        print(f"   ‚úì –¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result['total_amount']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        print()
        print("üöÄ –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        start = datetime.now()
        for i in range(100):
            transformer._parse_datetime(test_order['DATE_INSERT'])
        duration = (datetime.now() - start).total_seconds()
        print(f"   ‚úì 100 –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ –¥–∞—Ç—ã –∑–∞ {duration:.4f}s (–∫–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
    
    print()
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
    
    transformer = OptimizedTransformer()
    
    # –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    long_order = {
        'ID': 999999,
        'STATUS_ID': 'F',
        'DATE_INSERT': '01.01.2025 00:00:00',
        'ORDER_NUMBER': '12345678901234567890123456789012345',  # –î–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        'COMMENT': '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ' * 20,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        'PHONE': '+7701521154512345678901234567890',  # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    }
    
    try:
        result = transformer.transform_bitrix_to_supabase(long_order)
        
        print(f"   ‚úì –î–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –æ–±—Ä–µ–∑–∞–Ω: {len(result.get('order_number', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚úì –î–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—Ä–µ–∑–∞–Ω: {len(result.get('comment', ''))} —Å–∏–º–≤–æ–ª–æ–≤") 
        print(f"   ‚úì –î–ª–∏–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—Ä–µ–∑–∞–Ω: {len(result.get('recipient_phone', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö: {e}")
        return False

if __name__ == "__main__":
    success1 = test_transformer()
    success2 = test_edge_cases()
    
    print()
    if success1 and success2:
        print("üéØ –í–°–ï –¢–ï–°–¢–´ –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")