#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL Bitrix –≤ Supabase
–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import mysql.connector
from supabase import create_client
import os
from dotenv import load_dotenv
from datetime import datetime
import json
import sys

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω MySQL
MYSQL_CONFIG = {
    'host': '185.125.90.141',
    'port': 3306,
    'user': 'usercvety',
    'password': 'QQlPCtTA@z2%mhy',
    'database': 'dbcvety'
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SHOPS_IBLOCK_ID = 32  # ID –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
SELLER_PROPERTY_ID = 290  # ID —Å–≤–æ–π—Å—Ç–≤–∞ "–ü—Ä–æ–¥–∞–≤–µ—Ü" –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤

def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def get_shops_from_mysql(active_only=True):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL"""
    print_section(f"–ü–æ–ª—É—á–µ–Ω–∏–µ {'–∞–∫—Ç–∏–≤–Ω—ã—Ö' if active_only else '–≤—Å–µ—Ö'} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
        conn = mysql.connector.connect(**MYSQL_CONFIG)
        cursor = conn.cursor(dictionary=True)
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
        active_filter = "AND e.ACTIVE = 'Y'" if active_only else ""
        query = f"""
        SELECT 
            e.ID as bitrix_id,
            e.NAME as name,
            e.CODE as slug,
            e.ACTIVE,
            e.PREVIEW_TEXT as description,
            e.DATE_CREATE,
            e.TIMESTAMP_X,
            e.SORT as sort_order
        FROM b_iblock_element e
        WHERE e.IBLOCK_ID = {SHOPS_IBLOCK_ID}
        {active_filter}
        ORDER BY e.SORT, e.NAME
        """
        
        cursor.execute(query)
        shops = cursor.fetchall()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ MySQL")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        for shop in shops:
            count_query = f"""
            SELECT COUNT(DISTINCT ep.IBLOCK_ELEMENT_ID) as product_count
            FROM b_iblock_element_property ep
            WHERE ep.IBLOCK_PROPERTY_ID = {SELLER_PROPERTY_ID}
            AND ep.VALUE = %s
            """
            cursor.execute(count_query, (shop['bitrix_id'],))
            count_result = cursor.fetchone()
            shop['product_count'] = count_result['product_count'] if count_result else 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ø–∞
        shops_sorted = sorted(shops, key=lambda x: x['product_count'], reverse=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤
        print("\nüìä –¢–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, shop in enumerate(shops_sorted[:10], 1):
            status = "‚úÖ" if shop['ACTIVE'] == 'Y' else "‚ùå"
            print(f"  {i}. {shop['name']} (ID: {shop['bitrix_id']}, –¢–æ–≤–∞—Ä–æ–≤: {shop['product_count']}) {status}")
        
        if len(shops) > 10:
            print(f"  ... –∏ –µ—â–µ {len(shops) - 10} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        
        cursor.close()
        conn.close()
        
        return shops
        
    except mysql.connector.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MySQL: {e}")
        return []

def clear_test_shops(supabase, dry_run=False):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å emoji-–Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
    print_section("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        result = supabase.table('sellers').select('id, name').execute()
        
        if result.data:
            # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ emoji –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            emoji_chars = ['üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ', 'üíê', 'üè™', 'üéÅ', 'üåº', 'üåµ']
            test_sellers = [
                s for s in result.data 
                if any(char in s['name'] for char in emoji_chars)
            ]
            
            if test_sellers:
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(test_sellers)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                
                if dry_run:
                    print("üîç DRY RUN —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:")
                    for seller in test_sellers[:10]:
                        print(f"  - {seller['name']}")
                    if len(test_sellers) > 10:
                        print(f"  ... –∏ –µ—â–µ {len(test_sellers) - 10} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                else:
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
                    deleted_count = 0
                    for seller in test_sellers:
                        try:
                            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º seller_id —É —Ç–æ–≤–∞—Ä–æ–≤
                            supabase.table('products')\
                                .update({'seller_id': None, 'seller_name': None})\
                                .eq('seller_id', seller['id'])\
                                .execute()
                            
                            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                            supabase.table('sellers')\
                                .delete()\
                                .eq('id', seller['id'])\
                                .execute()
                            
                            deleted_count += 1
                            if deleted_count <= 5:
                                print(f"  ‚ùå –£–¥–∞–ª–µ–Ω: {seller['name']}")
                        except Exception as e:
                            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {seller['name']}: {e}")
                    
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            else:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return False

def sync_shops_to_supabase(mysql_shops, dry_run=False):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –≤ Supabase"""
    print_section(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase {'(DRY RUN)' if dry_run else ''}")
    
    if not mysql_shops:
        print("‚ùå –ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return False
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not dry_run:
            clear_test_shops(supabase)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ Supabase
        existing_result = supabase.table('sellers')\
            .select('id, name, metadata')\
            .execute()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ bitrix_id
        existing_shops = {}
        if existing_result.data:
            for shop in existing_result.data:
                if shop.get('metadata', {}).get('bitrix_id'):
                    bitrix_id = str(shop['metadata']['bitrix_id'])
                    existing_shops[bitrix_id] = shop
        
        # –°—á–µ—Ç—á–∏–∫–∏
        created_count = 0
        updated_count = 0
        skipped_count = 0
        error_count = 0
        
        print(f"\n–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é {len(mysql_shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤...")
        print(f"–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Supabase: {len(existing_shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –±–∞—Ç—á–∞–º–∏
        batch_size = 50
        for i in range(0, len(mysql_shops), batch_size):
            batch = mysql_shops[i:i + batch_size]
            
            for shop in batch:
                try:
                    bitrix_id = str(shop['bitrix_id'])
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    shop_data = {
                        'name': shop['name'],
                        'slug': shop['slug'] or shop['name'].lower().replace(' ', '-').replace('.', ''),
                        'description': shop['description'],
                        'is_active': shop['ACTIVE'] == 'Y',
                        'metadata': {
                            'bitrix_id': shop['bitrix_id'],
                            'product_count': shop['product_count'],
                            'sort_order': shop.get('sort_order', 500),
                            'created_at': shop['DATE_CREATE'].isoformat() if shop['DATE_CREATE'] else None,
                            'updated_at': shop['TIMESTAMP_X'].isoformat() if shop['TIMESTAMP_X'] else None,
                            'synced_at': datetime.now().isoformat()
                        }
                    }
                    
                    if dry_run:
                        if bitrix_id in existing_shops:
                            print(f"  üîÑ –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {shop['name']}")
                            updated_count += 1
                        else:
                            print(f"  ‚ûï –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω: {shop['name']}")
                            created_count += 1
                    else:
                        if bitrix_id in existing_shops:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω
                            result = supabase.table('sellers')\
                                .update(shop_data)\
                                .eq('id', existing_shops[bitrix_id]['id'])\
                                .execute()
                            
                            if result.data:
                                updated_count += 1
                                if updated_count <= 5:
                                    print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {shop['name']} ({shop['product_count']} —Ç–æ–≤–∞—Ä–æ–≤)")
                        else:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
                            result = supabase.table('sellers')\
                                .insert(shop_data)\
                                .execute()
                            
                            if result.data:
                                created_count += 1
                                if created_count <= 5:
                                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {shop['name']} (ID: {result.data[0]['id']}, {shop['product_count']} —Ç–æ–≤–∞—Ä–æ–≤)")
                    
                except Exception as e:
                    error_count += 1
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {shop['name']}: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (i + batch_size) % 100 == 0 or (i + batch_size) >= len(mysql_shops):
                print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {min(i + batch_size, len(mysql_shops))}/{len(mysql_shops)}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print_section("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print(f"üìä –í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ MySQL: {len(mysql_shops)}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {created_count}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
        
        if not dry_run:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            log_data = {
                'timestamp': datetime.now().isoformat(),
                'total_mysql': len(mysql_shops),
                'created': created_count,
                'updated': updated_count,
                'skipped': skipped_count,
                'errors': error_count,
                'top_shops': [
                    {
                        'name': s['name'],
                        'bitrix_id': s['bitrix_id'],
                        'product_count': s['product_count'],
                        'active': s['ACTIVE'] == 'Y'
                    }
                    for s in sorted(mysql_shops, key=lambda x: x['product_count'], reverse=True)[:20]
                ]
            }
            
            log_file = f"sync_shops_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(log_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {log_file}")
        
        return created_count + updated_count > 0
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Supabase: {e}")
        return False

def verify_sync():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
        all_shops = supabase.table('sellers')\
            .select('id, name, is_active, metadata')\
            .execute()
        
        if all_shops.data:
            active_shops = [s for s in all_shops.data if s.get('is_active')]
            inactive_shops = [s for s in all_shops.data if not s.get('is_active')]
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ Supabase:")
            print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_shops)}")
            print(f"  ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_shops)}")
            print(f"  üì¶ –í—Å–µ–≥–æ: {len(all_shops.data)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
            shops_with_products = []
            for shop in all_shops.data:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                count_result = supabase.table('products')\
                    .select('id', count='exact')\
                    .eq('seller_id', shop['id'])\
                    .execute()
                
                product_count = count_result.count if hasattr(count_result, 'count') else 0
                shops_with_products.append({
                    'name': shop['name'],
                    'product_count': product_count,
                    'bitrix_id': shop.get('metadata', {}).get('bitrix_id', '-'),
                    'active': shop.get('is_active')
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
            shops_with_products.sort(key=lambda x: x['product_count'], reverse=True)
            
            print("\nüìä –¢–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ Supabase:")
            for i, shop in enumerate(shops_with_products[:10], 1):
                status = "‚úÖ" if shop['active'] else "‚ùå"
                print(f"  {i}. {shop['name']} (Bitrix ID: {shop['bitrix_id']}, –¢–æ–≤–∞—Ä–æ–≤: {shop['product_count']}) {status}")
        else:
            print("‚ùå –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Supabase")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîÑ " * 20)
    print("  –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ê–ì–ê–ó–ò–ù–û–í –ò–ó –ü–†–û–î–ê–ö–®–ù")
    print("  MySQL (Bitrix Production) ‚Üí Supabase")
    print("üîÑ " * 20)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL")
    try:
        conn = mysql.connector.connect(**MYSQL_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT VERSION()")
        version = cursor.fetchone()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. MySQL –≤–µ—Ä—Å–∏—è: {version[0]}")
        cursor.close()
        conn.close()
    except mysql.connector.Error as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL: {e}")
        print("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ VPN –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
    if not SUPABASE_URL or not SUPABASE_KEY:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_KEY")
        print("‚ùó –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        return
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    print("\n" + "="*60)
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ê–ö–¢–ò–í–ù–´–ï –º–∞–≥–∞–∑–∏–Ω—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –í–°–ï –º–∞–≥–∞–∑–∏–Ω—ã (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)")
    print("3. Dry run - –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("4. –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    print("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4, 0): ").strip()
    
    if choice == '0':
        print("‚ùå –í—ã—Ö–æ–¥")
        return
    elif choice == '4':
        verify_sync()
        return
    elif choice in ['1', '2', '3']:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        active_only = choice == '1'
        dry_run = choice == '3'
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ MySQL
        mysql_shops = get_shops_from_mysql(active_only=active_only)
        
        if mysql_shops:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not dry_run:
                print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(mysql_shops)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                print("–≠—Ç–æ —É–¥–∞–ª–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏ –∑–∞–º–µ–Ω–∏—Ç –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
                response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
                
                if response.lower() not in ['yes', 'y', '–¥–∞']:
                    print("\n‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            success = sync_shops_to_supabase(mysql_shops, dry_run=dry_run)
            
            if success and not dry_run:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                verify_sync()
                print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ update_product_shop_links.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ç–æ–≤–∞—Ä–æ–≤")
            elif dry_run:
                print("\n‚úÖ Dry run –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 1 –∏–ª–∏ 2 –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            else:
                print("\n‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ MySQL")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()