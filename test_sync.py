#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
"""

import asyncio
from sync.sync_manager import SyncManager

async def test_single_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    
    print("üîÑ –§–ê–ó–ê 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    print()
    print("üü° –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
    
    try:
        manager = SyncManager()
        
        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑ 122118 –¥–ª—è —Ç–µ—Å—Ç–∞
        test_order_id = 122118
        print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ {test_order_id}...")
        
        result = await manager.sync_single_order(test_order_id, source='local')
        
        if result:
            print(f"   ‚úÖ –ó–∞–∫–∞–∑ {test_order_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ {test_order_id}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_batch_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    
    print()
    print("üü° –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (5 –∑–∞–∫–∞–∑–æ–≤)...")
    
    try:
        manager = SyncManager()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º 5 –∑–∞–∫–∞–∑–æ–≤: 122100-122105
        start_id = 122100
        end_id = 122105
        print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã —Å {start_id} –ø–æ {end_id}...")
        
        results = await manager.sync_by_range(start_id, end_id, max_orders=5)
        
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ: {results.get('success', 0)}")
        print(f"      ‚ùå –û—à–∏–±–æ–∫: {results.get('failed', 0)}")
        print(f"      ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results.get('skipped', 0)}")
        print(f"      üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results.get('total', 0)}")
        
        if results.get('success', 0) > 0:
            print(f"   ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ü–∞–∫–µ—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_sync_by_ids():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID"""
    
    print()
    print("üü° –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID...")
    
    try:
        manager = SyncManager()
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö ID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        order_ids = [122110, 122111, 122112]
        print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã: {order_ids}...")
        
        results = await manager.sync_by_ids(order_ids, source='local')
        
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ ID:")
        print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ: {results.get('success', 0)}")
        print(f"      ‚ùå –û—à–∏–±–æ–∫: {results.get('failed', 0)}")
        print(f"      ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results.get('skipped', 0)}")
        
        if results.get('success', 0) > 0:
            print(f"   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ ID –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ ID –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ ID: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—ã
    test1 = await test_single_sync()
    test2 = await test_batch_sync() 
    test3 = await test_sync_by_ids()
    
    print()
    print("=" * 50)
    if test1 and test2 and test3:
        print("üéØ –í–°–ï –¢–ï–°–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ù–ï –ü–†–û–®–õ–ò")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    asyncio.run(main())