#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ç–æ–≤–∞—Ä-–º–∞–≥–∞–∑–∏–Ω –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL –≤ Supabase
–û–±–Ω–æ–≤–ª—è–µ—Ç seller_id –∏ seller_name –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL
"""

import mysql.connector
from supabase import create_client
import os
from dotenv import load_dotenv
from datetime import datetime
import json
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω MySQL
MYSQL_CONFIG = {
    'host': '185.125.90.141',
    'port': 3306,
    'user': 'usercvety',
    'password': 'QQlPCtTA@z2%mhy',
    'database': 'dbcvety'
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SHOPS_IBLOCK_ID = 32  # ID –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
SELLER_PROPERTY_ID = 290  # ID —Å–≤–æ–π—Å—Ç–≤–∞ "–ü—Ä–æ–¥–∞–≤–µ—Ü" –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS_IBLOCK_IDS = [2, 17]  # ID –∏–Ω—Ñ–æ–±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤

def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def get_product_shop_links_from_mysql(limit=None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä-–º–∞–≥–∞–∑–∏–Ω –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω MySQL"""
    print_section("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Ç–æ–≤–∞—Ä-–º–∞–≥–∞–∑–∏–Ω –∏–∑ MySQL")
    
    try:
        conn = mysql.connector.connect(**MYSQL_CONFIG)
        cursor = conn.cursor(dictionary=True)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π
        count_query = f"""
        SELECT COUNT(DISTINCT ep.IBLOCK_ELEMENT_ID) as total
        FROM b_iblock_element_property ep
        JOIN b_iblock_element p ON p.ID = ep.IBLOCK_ELEMENT_ID
        JOIN b_iblock_element s ON s.ID = ep.VALUE
        WHERE ep.IBLOCK_PROPERTY_ID = {SELLER_PROPERTY_ID}
        AND p.IBLOCK_ID IN ({','.join(map(str, PRODUCTS_IBLOCK_IDS))})
        AND s.IBLOCK_ID = {SHOPS_IBLOCK_ID}
        AND ep.VALUE IS NOT NULL
        AND ep.VALUE != ''
        """
        
        cursor.execute(count_query)
        total_count = cursor.fetchone()['total']
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Ç–æ–≤–∞—Ä-–º–∞–≥–∞–∑–∏–Ω: {total_count}")
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–∞–º–∏ —Å–≤—è–∑–∏
        limit_clause = f"LIMIT {limit}" if limit else ""
        query = f"""
        SELECT 
            p.ID as product_bitrix_id,
            p.NAME as product_name,
            p.ACTIVE as product_active,
            s.ID as shop_bitrix_id,
            s.NAME as shop_name,
            s.ACTIVE as shop_active
        FROM b_iblock_element_property ep
        JOIN b_iblock_element p ON p.ID = ep.IBLOCK_ELEMENT_ID
        JOIN b_iblock_element s ON s.ID = ep.VALUE
        WHERE ep.IBLOCK_PROPERTY_ID = {SELLER_PROPERTY_ID}
        AND p.IBLOCK_ID IN ({','.join(map(str, PRODUCTS_IBLOCK_IDS))})
        AND s.IBLOCK_ID = {SHOPS_IBLOCK_ID}
        AND ep.VALUE IS NOT NULL
        AND ep.VALUE != ''
        ORDER BY s.NAME, p.NAME
        {limit_clause}
        """
        
        cursor.execute(query)
        links = cursor.fetchall()
        
        if limit:
            print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(links)} —Å–≤—è–∑–µ–π (–ª–∏–º–∏—Ç: {limit})")
        else:
            print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(links)} —Å–≤—è–∑–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
        shop_stats = {}
        for link in links:
            shop_name = link['shop_name']
            if shop_name not in shop_stats:
                shop_stats[shop_name] = 0
            shop_stats[shop_name] += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
        sorted_shops = sorted(shop_stats.items(), key=lambda x: x[1], reverse=True)
        
        print("\nüìä –¢–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ:")
        for i, (shop_name, count) in enumerate(sorted_shops[:10], 1):
            print(f"  {i}. {shop_name}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        cursor.close()
        conn.close()
        
        return links, total_count
        
    except mysql.connector.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MySQL: {e}")
        return [], 0

def get_shop_mapping(supabase):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ bitrix_id -> supabase_id –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    print_section("–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ Supabase
        result = supabase.table('sellers')\
            .select('id, name, metadata')\
            .execute()
        
        if not result.data:
            print("‚ùå –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Supabase")
            print("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ sync_shops_from_production.py")
            return {}
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
        shop_mapping = {}
        for shop in result.data:
            if shop.get('metadata', {}).get('bitrix_id'):
                bitrix_id = str(shop['metadata']['bitrix_id'])
                shop_mapping[bitrix_id] = {
                    'id': shop['id'],
                    'name': shop['name']
                }
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(shop_mapping)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        
        return shop_mapping
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
        return {}

def update_product_links(links, shop_mapping, supabase, batch_size=100, dry_run=False):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä-–º–∞–≥–∞–∑–∏–Ω –≤ Supabase"""
    print_section(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≤ Supabase {'(DRY RUN)' if dry_run else ''}")
    
    if not links:
        print("‚ùå –ù–µ—Ç —Å–≤—è–∑–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return False
    
    if not shop_mapping:
        print("‚ùå –ú–∞–ø–ø–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—É—Å—Ç–æ–π")
        return False
    
    # –°—á–µ—Ç—á–∏–∫–∏
    updated_count = 0
    not_found_products = 0
    not_found_shops = 0
    already_correct = 0
    error_count = 0
    
    print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(links)} —Å–≤—è–∑–µ–π –±–∞—Ç—á–∞–º–∏ –ø–æ {batch_size}...")
    
    start_time = time.time()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
    for i in range(0, len(links), batch_size):
        batch = links[i:i + batch_size]
        batch_start = time.time()
        
        # –°–æ–±–∏—Ä–∞–µ–º bitrix_id —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞—Ç—á–µ
        product_bitrix_ids = [str(link['product_bitrix_id']) for link in batch]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ Supabase –ø–æ bitrix_id
            products_result = supabase.table('products')\
                .select('id, name, seller_id, seller_name, metadata')\
                .in_('metadata->>bitrix_id', product_bitrix_ids)\
                .execute()
            
            if products_result.data:
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤
                products_dict = {}
                for product in products_result.data:
                    if product.get('metadata', {}).get('bitrix_id'):
                        bitrix_id = str(product['metadata']['bitrix_id'])
                        products_dict[bitrix_id] = product
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
                for link in batch:
                    product_bitrix_id = str(link['product_bitrix_id'])
                    shop_bitrix_id = str(link['shop_bitrix_id'])
                    
                    if product_bitrix_id in products_dict:
                        product = products_dict[product_bitrix_id]
                        
                        if shop_bitrix_id in shop_mapping:
                            shop_info = shop_mapping[shop_bitrix_id]
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                            if product['seller_id'] == shop_info['id'] and product['seller_name'] == shop_info['name']:
                                already_correct += 1
                            else:
                                if not dry_run:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                                    update_result = supabase.table('products')\
                                        .update({
                                            'seller_id': shop_info['id'],
                                            'seller_name': shop_info['name'],
                                            'updated_at': 'now()'
                                        })\
                                        .eq('id', product['id'])\
                                        .execute()
                                    
                                    if update_result.data:
                                        updated_count += 1
                                        if updated_count <= 10:
                                            print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {link['product_name'][:50]} -> {shop_info['name']}")
                                    else:
                                        error_count += 1
                                else:
                                    updated_count += 1
                                    if updated_count <= 10:
                                        print(f"  üîÑ –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {link['product_name'][:50]} -> {shop_info['name']}")
                        else:
                            not_found_shops += 1
                            if not_found_shops <= 5:
                                print(f"  ‚ùì –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {link['shop_name']} (ID: {shop_bitrix_id})")
                    else:
                        not_found_products += 1
            else:
                not_found_products += len(batch)
            
        except Exception as e:
            error_count += len(batch)
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        batch_time = time.time() - batch_start
        total_time = time.time() - start_time
        avg_time = total_time / (i + batch_size)
        remaining = (len(links) - i - batch_size) * avg_time / batch_size
        
        if (i + batch_size) % 500 == 0 or (i + batch_size) >= len(links):
            print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {min(i + batch_size, len(links))}/{len(links)} " +
                  f"(~{remaining:.0f}—Å –æ—Å—Ç–∞–ª–æ—Å—å)")
            print(f"    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}, –£–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {already_correct}, " +
                  f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ: —Ç–æ–≤–∞—Ä–æ–≤={not_found_products}, –º–∞–≥–∞–∑–∏–Ω–æ–≤={not_found_shops}")
    
    total_time = time.time() - start_time
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print_section("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–í–Ø–ó–ï–ô")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–≤—è–∑–µ–π: {len(links)}")
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"‚úì  –£–∂–µ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {already_correct}")
    print(f"‚ùì –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Supabase: {not_found_products}")
    print(f"‚ùì –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {not_found_shops}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    if not dry_run:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        log_data = {
            'timestamp': datetime.now().isoformat(),
            'total_links': len(links),
            'updated': updated_count,
            'already_correct': already_correct,
            'not_found_products': not_found_products,
            'not_found_shops': not_found_shops,
            'errors': error_count,
            'execution_time': total_time
        }
        
        log_file = f"update_product_links_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(log_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {log_file}")
    
    return updated_count > 0

def verify_links():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        total_products = supabase.table('products')\
            .select('id', count='exact')\
            .execute()
        
        with_seller = supabase.table('products')\
            .select('id', count='exact')\
            .not_.is_('seller_id', 'null')\
            .execute()
        
        without_seller = supabase.table('products')\
            .select('id', count='exact')\
            .is_('seller_id', 'null')\
            .execute()
        
        total_count = total_products.count if hasattr(total_products, 'count') else 0
        with_seller_count = with_seller.count if hasattr(with_seller, 'count') else 0
        without_seller_count = without_seller.count if hasattr(without_seller, 'count') else 0
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Supabase:")
        print(f"  üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_count}")
        print(f"  ‚úÖ –° –º–∞–≥–∞–∑–∏–Ω–æ–º: {with_seller_count} ({with_seller_count*100/total_count:.1f}%)")
        print(f"  ‚ùå –ë–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞: {without_seller_count} ({without_seller_count*100/total_count:.1f}%)")
        
        # –¢–æ–ø –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        print("\nüìä –¢–æ–ø-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:")
        
        sellers_result = supabase.table('sellers')\
            .select('id, name')\
            .execute()
        
        if sellers_result.data:
            shop_stats = []
            for seller in sellers_result.data[:50]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50 –º–∞–≥–∞–∑–∏–Ω–æ–≤
                count_result = supabase.table('products')\
                    .select('id', count='exact')\
                    .eq('seller_id', seller['id'])\
                    .execute()
                
                count = count_result.count if hasattr(count_result, 'count') else 0
                if count > 0:
                    shop_stats.append({
                        'name': seller['name'],
                        'count': count
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            shop_stats.sort(key=lambda x: x['count'], reverse=True)
            for i, shop in enumerate(shop_stats[:10], 1):
                print(f"  {i}. {shop['name']}: {shop['count']} —Ç–æ–≤–∞—Ä–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîÑ " * 20)
    print("  –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–í–Ø–ó–ï–ô –¢–û–í–ê–†-–ú–ê–ì–ê–ó–ò–ù")
    print("  MySQL (Bitrix Production) ‚Üí Supabase")
    print("üîÑ " * 20)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    
    # MySQL
    try:
        conn = mysql.connector.connect(**MYSQL_CONFIG)
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ")
    except mysql.connector.Error as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL: {e}")
        return
    
    # Supabase
    if not SUPABASE_URL or not SUPABASE_KEY:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase")
        return
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–∞–π–¥–µ–Ω—ã")
    
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return
    
    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    print("\n" + "="*60)
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ 1000 —Å–≤—è–∑–µ–π (—Ç–µ—Å—Ç)")
    print("2. –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ 5000 —Å–≤—è–∑–µ–π")
    print("3. –û–±–Ω–æ–≤–∏—Ç—å –í–°–ï —Å–≤—è–∑–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)")
    print("4. Dry run - –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ (–ø–µ—Ä–≤—ã–µ 100)")
    print("5. –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    print("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-5): ").strip()
    
    if choice == '0':
        print("‚ùå –í—ã—Ö–æ–¥")
        return
    elif choice == '5':
        verify_links()
        return
    elif choice in ['1', '2', '3', '4']:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if choice == '1':
            limit = 1000
            dry_run = False
        elif choice == '2':
            limit = 5000
            dry_run = False
        elif choice == '3':
            limit = None
            dry_run = False
        else:  # choice == '4'
            limit = 100
            dry_run = True
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –∏–∑ MySQL
        links, total_count = get_product_shop_links_from_mysql(limit=limit)
        
        if not links:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ –∏–∑ MySQL")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        shop_mapping = get_shop_mapping(supabase)
        
        if not shop_mapping:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            print("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ sync_shops_from_production.py")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not dry_run:
            print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {len(links)} —Å–≤—è–∑–µ–π —Ç–æ–≤–∞—Ä-–º–∞–≥–∞–∑–∏–Ω")
            if limit is None:
                print(f"–í—Å–µ–≥–æ –≤ –±–∞–∑–µ {total_count} —Å–≤—è–∑–µ–π - —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
            
            if response.lower() not in ['yes', 'y', '–¥–∞']:
                print("\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = update_product_links(links, shop_mapping, supabase, dry_run=dry_run)
        
        if success and not dry_run:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            verify_links()
            print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        elif dry_run:
            print("\n‚úÖ Dry run –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏–∏ 1-3 –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        else:
            print("\n‚ö†Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()