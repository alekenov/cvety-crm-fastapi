#!/usr/bin/env python3
"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª sync_missing_orders.py –∏ sync_production_order.py

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:
- –ü–æ–∏—Å–∫ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
- –ü—Ä—è–º–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å production —Å–µ—Ä–≤–µ—Ä–∞
- Batch –æ–ø–µ—Ä–∞—Ü–∏–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import os
import sys
import json
import subprocess
import mysql.connector
import asyncio
from datetime import datetime
from typing import List, Dict, Optional, Any
from supabase import create_client
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ core –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from core.transformer import OptimizedTransformer

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY")

# MySQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
MYSQL_CONFIG_LOCAL = {
    'host': 'localhost',
    'port': 3306,
    'user': 'root',
    'password': 'cvety123',
    'database': 'cvety_db',
    'charset': 'utf8mb4'
}

PRODUCTION_SERVER = '185.125.90.141'
PRODUCTION_DATABASE = 'dbcvety'

class SyncManager:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        if not SUPABASE_URL or not SUPABASE_SERVICE_KEY:
            raise ValueError("Supabase credentials not found")
        
        self.supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        self.transformer = OptimizedTransformer()
        self.mysql_conn = None
        
    # ==================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ====================
    
    def connect_to_mysql(self, use_local: bool = True) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL (–ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –∏–ª–∏ production)
        
        Args:
            use_local: True –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Docker, False –¥–ª—è production
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if use_local:
                self.mysql_conn = mysql.connector.connect(**MYSQL_CONFIG_LOCAL)
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É MySQL (Docker)")
            else:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ production MySQL —á–µ—Ä–µ–∑ SSH
                mysql_config_prod = {
                    'host': '185.125.90.141',
                    'database': 'dbcvety',
                    'user': 'usercvety',
                    'password': 'QQlPCtTA@z2%mhy',
                    'charset': 'utf8mb4',
                    'autocommit': True,
                    'connection_timeout': 30
                }
                self.mysql_conn = mysql.connector.connect(**mysql_config_prod)
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ production MySQL")
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
            return False
    
    # ==================== –ü–û–ò–°–ö –ü–†–û–ü–£–©–ï–ù–ù–´–• –ó–ê–ö–ê–ó–û–í ====================
    
    def find_missing_orders(self, id_range_start: int, id_range_end: int) -> List[int]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç ID –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ MySQL, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Supabase
        
        Args:
            id_range_start: –ù–∞—á–∞–ª—å–Ω—ã–π ID –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            id_range_end: –ö–æ–Ω–µ—á–Ω—ã–π ID –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö ID –∑–∞–∫–∞–∑–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –∏–∑ Supabase
            supabase_result = self.supabase.table('orders')\
                .select('bitrix_order_id')\
                .gte('bitrix_order_id', id_range_start)\
                .lte('bitrix_order_id', id_range_end)\
                .execute()
            
            synced_ids = {int(row['bitrix_order_id']) for row in supabase_result.data if row['bitrix_order_id']}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ MySQL
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.mysql_conn is None:
                if not self.connect_to_mysql(use_local=True):
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
                    return []
            
            cursor = self.mysql_conn.cursor()
            cursor.execute("""
                SELECT ID FROM b_sale_order 
                WHERE ID BETWEEN %s AND %s 
                AND LID = 's1'
                ORDER BY ID
            """, (id_range_start, id_range_end))
            
            mysql_ids = {row[0] for row in cursor.fetchall()}
            cursor.close()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
            missing_ids = mysql_ids - synced_ids
            
            print(f"üìä MySQL: {len(mysql_ids)} –∑–∞–∫–∞–∑–æ–≤ | Supabase: {len(synced_ids)} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(missing_ids)}")
            
            return sorted(list(missing_ids))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    # ==================== –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
    
    def get_order_from_mysql(self, order_id: int) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ MySQL
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞ –≤ Bitrix
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ webhook –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.mysql_conn is None:
                if not self.connect_to_mysql(use_local=True):
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                    return None
            
            cursor = self.mysql_conn.cursor(dictionary=True)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            cursor.execute("""
                SELECT 
                    o.ID,
                    o.ORDER_TOPIC as order_number,
                    o.PRICE as total_amount,
                    o.STATUS_ID as status,
                    o.USER_ID,
                    o.DATE_INSERT as created_at,
                    o.DATE_UPDATE as updated_at,
                    o.CURRENCY,
                    o.COMMENTS
                FROM b_sale_order o
                WHERE o.ID = %s AND o.LID = 's1'
            """, (order_id,))
            
            order = cursor.fetchone()
            if not order:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞
            cursor.execute("""
                SELECT 
                    p.CODE,
                    p.NAME,
                    pv.VALUE
                FROM b_sale_order_props_value pv
                JOIN b_sale_order_props p ON p.ID = pv.ORDER_PROPS_ID
                WHERE pv.ORDER_ID = %s
            """, (order_id,))
            
            properties = {}
            for prop in cursor.fetchall():
                if prop['CODE']:
                    properties[prop['CODE']] = {
                        'VALUE': prop['VALUE'] or '',
                        'NAME': prop['NAME'] or ''
                    }
            
            cursor.close()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –æ—Ç webhook
            webhook_data = {
                'ID': str(order['ID']),
                'ACCOUNT_NUMBER': str(order['ID']),
                'PRICE': str(order['total_amount']) if order['total_amount'] else '0',
                'STATUS_ID': order['status'] or 'N',
                'USER_ID': str(order['USER_ID']) if order['USER_ID'] else '0',
                'DATE_INSERT': order['created_at'].isoformat() if order['created_at'] else None,
                'DATE_UPDATE': order['updated_at'].isoformat() if order['updated_at'] else None,
                'CURRENCY': order['CURRENCY'] or 'KZT',
                'COMMENTS': order['COMMENTS'] or '',
                'PROPERTIES': properties
            }
            
            return webhook_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑ MySQL: {e}")
            return None
    
    def get_order_from_production(self, order_id: int) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞–ø—Ä—è–º—É—é —Å production —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ SSH
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞ –≤ Bitrix
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None
        """
        try:
            # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            query = f"""
            SELECT 
                o.ID,
                o.ORDER_TOPIC as order_number,
                o.PRICE as total_amount,
                o.STATUS_ID as status,
                o.USER_ID,
                o.DATE_INSERT as created_at,
                o.DATE_UPDATE as updated_at,
                o.CURRENCY,
                o.COMMENTS
            FROM b_sale_order o
            WHERE o.ID = {order_id} AND o.LID = 's1'
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ SSH
            result = subprocess.run([
                'ssh', f'root@{PRODUCTION_SERVER}',
                f'mysql -e "{query}" {PRODUCTION_DATABASE}'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode != 0:
                print(f"‚ùå SSH/MySQL –æ—à–∏–±–∫–∞: {result.stderr}")
                return None
            
            lines = result.stdout.strip().split('\n')
            if len(lines) < 2:
                print(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ production")
                return None
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            headers = lines[0].split('\t')
            values = lines[1].split('\t')
            order_data = dict(zip(headers, values))
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–±–µ–∑ —Å–≤–æ–π—Å—Ç–≤ –ø–æ–∫–∞)
            webhook_data = {
                'ID': order_data['ID'],
                'ACCOUNT_NUMBER': str(order_data['ID']),
                'PRICE': order_data['total_amount'] if order_data['total_amount'] != 'NULL' else '0',
                'STATUS_ID': order_data['status'] if order_data['status'] != 'NULL' else 'N',
                'USER_ID': order_data['USER_ID'] if order_data['USER_ID'] != 'NULL' else '0',
                'DATE_INSERT': order_data['created_at'] if order_data['created_at'] != 'NULL' else None,
                'DATE_UPDATE': order_data['updated_at'] if order_data['updated_at'] != 'NULL' else None,
                'CURRENCY': order_data['CURRENCY'] if order_data['CURRENCY'] != 'NULL' else 'KZT',
                'COMMENTS': order_data['COMMENTS'] if order_data['COMMENTS'] != 'NULL' else '',
                'PROPERTIES': {}
            }
            
            return webhook_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å production: {e}")
            return None
    
    # ==================== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ====================
    
    async def sync_single_order(self, order_id: int, source: str = 'local') -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∑–∞–∫–∞–∑
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('local' –∏–ª–∏ 'production')
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            print(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –∑–∞–∫–∞–∑ {order_id} ({source})...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if source == 'local':
                order_data = self.get_order_from_mysql(order_id)
            elif source == 'production':
                order_data = self.get_order_from_production(order_id)
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
            
            if not order_data:
                print(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {source}")
                return False
            
            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º
            supabase_order = self.transformer.transform_bitrix_to_supabase(order_data)
            if not supabase_order:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = self.supabase.table('orders')\
                .select('id')\
                .eq('bitrix_order_id', order_id)\
                .execute()
            
            if existing.data:
                # –û–±–Ω–æ–≤–ª—è–µ–º
                result = self.supabase.table('orders')\
                    .update(supabase_order)\
                    .eq('bitrix_order_id', order_id)\
                    .execute()
                action = 'update'
            else:
                # –°–æ–∑–¥–∞–µ–º
                result = self.supabase.table('orders').insert(supabase_order).execute()
                action = 'create'
            
            if result.data:
                print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω ({action})")
                
                # –õ–æ–≥–∏—Ä—É–µ–º
                self.supabase.table('sync_log').insert({
                    'action': f'manual_{action}',
                    'direction': f'{source}_to_supabase',
                    'bitrix_id': str(order_id),
                    'status': 'success',
                    'payload': order_data,
                    'created_at': datetime.now().isoformat()
                }).execute()
                
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            return False
    
    async def sync_by_ids(self, order_ids: List[int], source: str = 'local') -> Dict[str, int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å–ø–∏—Å–∫—É ID
        
        Args:
            order_ids: –°–ø–∏—Å–æ–∫ ID –∑–∞–∫–∞–∑–æ–≤
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        print(f"üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {len(order_ids)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ {source}...")
        
        successful = 0
        failed = 0
        
        for i, order_id in enumerate(order_ids, 1):
            print(f"[{i}/{len(order_ids)}] ", end="")
            
            if await self.sync_single_order(order_id, source):
                successful += 1
            else:
                failed += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.3)
        
        stats = {
            'total': len(order_ids),
            'successful': successful,
            'failed': failed,
            'success_rate': (successful / len(order_ids) * 100) if order_ids else 0
        }
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{len(order_ids)} —É—Å–ø–µ—à–Ω–æ ({stats['success_rate']:.1f}%)")
        return stats
    
    async def sync_by_range(self, id_start: int, id_end: int, max_orders: int = 50, source: str = 'local') -> Dict[str, int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É ID
        
        Args:
            id_start: –ù–∞—á–∞–ª—å–Ω—ã–π ID
            id_end: –ö–æ–Ω–µ—á–Ω—ã–π ID  
            max_orders: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        if source == 'local' and not self.connect_to_mysql(use_local=True):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL")
            return {'total': 0, 'successful': 0, 'failed': 0, 'success_rate': 0}
        
        try:
            if source == 'local':
                missing_ids = self.find_missing_orders(id_start, id_end)
            else:
                # –î–ª—è production –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω
                missing_ids = list(range(id_start, id_end + 1))
            
            if not missing_ids:
                print("‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return {'total': 0, 'successful': 0, 'failed': 0, 'success_rate': 100}
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if len(missing_ids) > max_orders:
                print(f"‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {max_orders} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ {len(missing_ids)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö")
                missing_ids = missing_ids[:max_orders]
            
            return await self.sync_by_ids(missing_ids, source)
            
        finally:
            if self.mysql_conn:
                self.mysql_conn.close()
                print("üîå MySQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ====================
    
    def get_sync_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            total_result = self.supabase.table('orders')\
                .select('id', count='exact')\
                .execute()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ Bitrix
            bitrix_result = self.supabase.table('orders')\
                .select('id', count='exact')\
                .is_('bitrix_order_id', 'not.null')\
                .execute()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            hour_ago = datetime.now().replace(microsecond=0) - timedelta(hours=1)
            recent_result = self.supabase.table('sync_log')\
                .select('status', count='exact')\
                .gte('created_at', hour_ago.isoformat())\
                .execute()
            
            # –û—à–∏–±–∫–∏ –∑–∞ —á–∞—Å
            errors_result = self.supabase.table('sync_log')\
                .select('status', count='exact')\
                .eq('status', 'error')\
                .gte('created_at', hour_ago.isoformat())\
                .execute()
            
            return {
                'total_orders': total_result.count,
                'bitrix_orders': bitrix_result.count,
                'sync_coverage': (bitrix_result.count / total_result.count * 100) if total_result.count else 0,
                'recent_syncs': recent_result.count,
                'recent_errors': errors_result.count,
                'success_rate': ((recent_result.count - errors_result.count) / recent_result.count * 100) if recent_result.count else 100
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
            test_result = self.supabase.table('orders').select('id').limit(1).execute()
            supabase_ok = len(test_result.data) >= 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π MySQL
            mysql_ok = self.connect_to_mysql(use_local=True)
            if self.mysql_conn:
                self.mysql_conn.close()
            
            stats = self.get_sync_statistics()
            
            return {
                'supabase_connection': 'ok' if supabase_ok else 'error',
                'mysql_connection': 'ok' if mysql_ok else 'error',
                'sync_statistics': stats,
                'status': 'healthy' if (supabase_ok and mysql_ok) else 'degraded',
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    import sys
    
    manager = SyncManager()
    
    if '--health' in sys.argv:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health = manager.health_check()
        print(json.dumps(health, indent=2, ensure_ascii=False))
        
    elif '--stats' in sys.argv:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = manager.get_sync_statistics()
        print(json.dumps(stats, indent=2, ensure_ascii=False))
        
    elif '--ids' in sys.argv:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ ID
        try:
            idx = sys.argv.index('--ids')
            ids_str = sys.argv[idx + 1]
            order_ids = [int(x.strip()) for x in ids_str.split(',')]
            source = 'production' if '--production' in sys.argv else 'local'
            
            result = await manager.sync_by_ids(order_ids, source)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False)}")
            
        except (ValueError, IndexError) as e:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç --ids: {e}")
            
    elif '--range' in sys.argv:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        try:
            range_idx = sys.argv.index('--range')
            range_str = sys.argv[range_idx + 1]
            start_id, end_id = map(int, range_str.split('-'))
            
            max_orders = 50
            if '--max' in sys.argv:
                max_idx = sys.argv.index('--max')
                max_orders = int(sys.argv[max_idx + 1])
            
            source = 'production' if '--production' in sys.argv else 'local'
            
            result = await manager.sync_by_range(start_id, end_id, max_orders, source)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False)}")
            
        except (ValueError, IndexError) as e:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç --range: {e}")
            
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        print("""
üîÑ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python3 sync/sync_manager.py --health                          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  python3 sync/sync_manager.py --stats                           # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  python3 sync/sync_manager.py --ids 122185,122186               # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  python3 sync/sync_manager.py --range 122000-122200 --max 50    # –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞–∫–∞–∑–æ–≤
  python3 sync/sync_manager.py --ids 122185 --production         # –ò–∑ production
  
–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
  --production    –ü–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å production —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ SSH
  (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é MySQL
        """)


if __name__ == "__main__":
    asyncio.run(main())