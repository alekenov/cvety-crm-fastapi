#!/usr/bin/env python3
"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
Supabase ‚Üí Production Bitrix

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ Bitrix CMS
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å sync_back.py –∏ reverse_sync_service.py
"""

import os
import requests
import json
import time
import asyncio
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
from supabase import create_client, Client
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/tmp/reverse_sync.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL", "https://cvety.kz/rest/1/webhook_token/")
SYNC_ENABLED = os.getenv("REVERSE_SYNC_ENABLED", "true").lower() == "true"

# –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ Supabase ‚Üí Bitrix
STATUS_MAP = {
    'new': 'N',           # –ù–æ–≤—ã–π
    'processing': 'P',     # –í –æ–±—Ä–∞–±–æ—Ç–∫–µ
    'completed': 'F',      # –í—ã–ø–æ–ª–Ω–µ–Ω
    'delivered': 'D',      # –î–æ—Å—Ç–∞–≤–ª–µ–Ω
    'cancelled': 'DN',     # –û—Ç–º–µ–Ω–µ–Ω
    'refunded': 'RF'       # –í–æ–∑–≤—Ä–∞—Ç
}

class UnifiedReverseSync:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        if not SUPABASE_URL or not SUPABASE_SERVICE_KEY:
            raise ValueError("Supabase credentials not found")
        
        self.supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        self.enabled = SYNC_ENABLED
        self.last_check = datetime.now()
        
        logger.info("Reverse sync service initialized")
    
    def sync_order_status(self, supabase_order_id: str, new_status: str, bitrix_order_id: Optional[int] = None) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ Bitrix
        
        Args:
            supabase_order_id: UUID –∑–∞–∫–∞–∑–∞ –≤ Supabase
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Supabase
            bitrix_order_id: ID –∑–∞–∫–∞–∑–∞ –≤ Bitrix (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        if not self.enabled:
            logger.info("Reverse sync disabled")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º bitrix_order_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not bitrix_order_id:
                order = self.supabase.table('orders')\
                    .select('bitrix_order_id')\
                    .eq('id', supabase_order_id)\
                    .single()\
                    .execute()
                
                if not order.data or not order.data.get('bitrix_order_id'):
                    logger.warning(f"No bitrix_order_id found for Supabase order {supabase_order_id}")
                    return False
                
                bitrix_order_id = order.data['bitrix_order_id']
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç Bitrix
            bitrix_status = STATUS_MAP.get(new_status, 'N')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Bitrix
            response = requests.post(
                f"{BITRIX_WEBHOOK_URL}sale.order.update",
                json={
                    'id': bitrix_order_id,
                    'fields': {
                        'STATUS_ID': bitrix_status,
                        'DATE_STATUS': datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                    }
                },
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('result'):
                    logger.info(f"‚úÖ Order {bitrix_order_id} status updated to {bitrix_status}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤ reverse_sync_log
                    self.supabase.table('reverse_sync_log').insert({
                        'supabase_order_id': supabase_order_id,
                        'bitrix_order_id': bitrix_order_id,
                        'action': 'status_update',
                        'old_status': 'unknown',  # TODO: –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                        'new_status': new_status,
                        'bitrix_status': bitrix_status,
                        'status': 'success',
                        'created_at': datetime.now().isoformat()
                    }).execute()
                    
                    return True
                else:
                    logger.error(f"‚ùå Bitrix API error: {result.get('error', 'Unknown error')}")
                    return False
            else:
                logger.error(f"‚ùå HTTP error {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error syncing order status: {e}")
            return False
    
    def get_pending_updates(self, since: Optional[datetime] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            since: –í—Ä–µ–º—è —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            if not since:
                since = datetime.now() - timedelta(hours=1)
            
            # –ò—â–µ–º –∑–∞–∫–∞–∑—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            result = self.supabase.table('orders')\
                .select('id, bitrix_order_id, status, updated_at')\
                .gte('updated_at', since.isoformat())\
                .is_('bitrix_order_id', 'not.null')\
                .order('updated_at')\
                .execute()
            
            return result.data or []
            
        except Exception as e:
            logger.error(f"‚ùå Error getting pending updates: {e}")
            return []
    
    def sync_batch_updates(self, max_orders: int = 50) -> Dict[str, int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        
        Args:
            max_orders: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        logger.info("Starting batch reverse sync...")
        
        pending_orders = self.get_pending_updates(since=self.last_check)
        if not pending_orders:
            logger.info("No pending updates found")
            return {'processed': 0, 'successful': 0, 'failed': 0}
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if len(pending_orders) > max_orders:
            pending_orders = pending_orders[:max_orders]
            logger.info(f"Limited to {max_orders} orders")
        
        successful = 0
        failed = 0
        
        for order in pending_orders:
            try:
                if self.sync_order_status(
                    order['id'], 
                    order['status'], 
                    order['bitrix_order_id']
                ):
                    successful += 1
                else:
                    failed += 1
                    
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"‚ùå Error processing order {order['id']}: {e}")
                failed += 1
        
        self.last_check = datetime.now()
        
        stats = {
            'processed': len(pending_orders),
            'successful': successful,
            'failed': failed,
            'success_rate': (successful / len(pending_orders) * 100) if pending_orders else 0
        }
        
        logger.info(f"Batch sync completed: {stats}")
        return stats
    
    async def run_continuous_sync(self, interval_seconds: int = 300):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        
        Args:
            interval_seconds: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info(f"Starting continuous reverse sync (interval: {interval_seconds}s)")
        
        while True:
            try:
                stats = self.sync_batch_updates()
                
                if stats['processed'] > 0:
                    logger.info(f"üìä Sync stats: {stats['successful']}/{stats['processed']} successful")
                
                await asyncio.sleep(interval_seconds)
                
            except KeyboardInterrupt:
                logger.info("Stopping continuous sync...")
                break
            except Exception as e:
                logger.error(f"‚ùå Error in continuous sync: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
            test_query = self.supabase.table('orders').select('id').limit(1).execute()
            supabase_ok = len(test_query.data) >= 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitrix
            bitrix_ok = False
            try:
                response = requests.get(f"{BITRIX_WEBHOOK_URL}app.info", timeout=5)
                bitrix_ok = response.status_code == 200
            except:
                pass
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            hour_ago = datetime.now() - timedelta(hours=1)
            recent_syncs = self.supabase.table('reverse_sync_log')\
                .select('status', count='exact')\
                .gte('created_at', hour_ago.isoformat())\
                .execute()
            
            return {
                'enabled': self.enabled,
                'supabase_connection': 'ok' if supabase_ok else 'error',
                'bitrix_connection': 'ok' if bitrix_ok else 'error',
                'recent_syncs': recent_syncs.count,
                'last_check': self.last_check.isoformat(),
                'status': 'healthy' if (supabase_ok and self.enabled) else 'degraded'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Health check error: {e}")
            return {
                'enabled': self.enabled,
                'status': 'error',
                'error': str(e)
            }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    import sys
    
    sync_service = UnifiedReverseSync()
    
    if '--continuous' in sys.argv:
        # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        interval = 300  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if '--interval' in sys.argv:
            try:
                idx = sys.argv.index('--interval')
                interval = int(sys.argv[idx + 1])
            except (ValueError, IndexError):
                pass
        
        asyncio.run(sync_service.run_continuous_sync(interval))
        
    elif '--health' in sys.argv:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        health = sync_service.health_check()
        print(json.dumps(health, indent=2))
        
    else:
        # –†–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        max_orders = 50
        if '--max' in sys.argv:
            try:
                idx = sys.argv.index('--max')
                max_orders = int(sys.argv[idx + 1])
            except (ValueError, IndexError):
                pass
        
        stats = sync_service.sync_batch_updates(max_orders)
        print(f"üìä Reverse sync completed: {stats}")


if __name__ == "__main__":
    main()