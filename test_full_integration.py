#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import requests
import json
import time
from datetime import datetime
from sync.sync_manager import SyncManager

async def test_full_cycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: webhook ‚Üí transform ‚Üí save ‚Üí check"""
    
    print("üöÄ –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢")
    print("=" * 60)
    
    # 1. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    test_order_id = int(time.time()) % 1000000  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    
    webhook_payload = {
        "token": "fad5fbe4c8a520cf6d5453685b758c7fd9f6681f084be335fcdcd190ad9aaa0e",
        "event": "order.create",
        "data": {
            "ID": test_order_id,
            "STATUS_ID": "N",
            "DATE_INSERT": "22.08.2025 16:30:00",
            "PRICE": "7500.00",
            "USER_ID": 1079,
            "PHONE": "+77777777777",
            "EMAIL": "integration@test.com",
            "DELIVERY_ADDRESS": "–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 1",
            "COMMENT": f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç {test_order_id}",
            "PAYMENT_ID": "kaspi",
            "PAYMENT_STATUS": "Y"
        }
    }
    
    print(f"üìù –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ ID {test_order_id}")
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook
    try:
        response = requests.post(
            "http://localhost:8001/webhooks/bitrix/order",
            json=webhook_payload,
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Webhook –ø—Ä–∏–Ω—è—Ç: {result.get('status', 'unknown')}")
            supabase_order_id = result.get('order_id')
            print(f"   Supabase Order ID: {supabase_order_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –ø–æ—è–≤–∏–ª—Å—è –≤ Supabase
    print(f"\nüìä –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ –≤ Supabase...")
    
    try:
        from supabase import create_client
        from config import config
        
        supabase = create_client(config.SUPABASE_URL, config.SUPABASE_SERVICE_KEY)
        
        # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ bitrix_order_id
        result = supabase.table('orders').select('*').eq('bitrix_order_id', test_order_id).execute()
        
        if result.data:
            order = result.data[0]
            print(f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ Supabase!")
            print(f"   ID: {order.get('id')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {order.get('status')}")
            print(f"   –°—É–º–º–∞: {order.get('total_amount')}")
            print(f"   –°–æ–∑–¥–∞–Ω: {order.get('created_at')}")
            return True
        else:
            print(f"‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase: {e}")
        return False

async def test_sync_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    print(f"\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    manager = SyncManager()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é 10 –∑–∞–∫–∞–∑–æ–≤
    test_ids = [122100 + i for i in range(10)]
    
    print(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º {len(test_ids)} –∑–∞–∫–∞–∑–æ–≤...")
    start_time = time.time()
    
    try:
        results = await manager.sync_by_ids(test_ids, source='local')
        duration = time.time() - start_time
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {len(test_ids)/duration:.2f} –∑–∞–∫–∞–∑–æ–≤/—Å–µ–∫")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {results.get('success', 0)}")
        print(f"   –û—à–∏–±–æ–∫: {results.get('failed', 0)}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results.get('skipped', 0)}")
        
        if duration < 30:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 30 —Å–µ–∫—É–Ω–¥
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è")
            return True
        else:
            print("‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

async def test_reverse_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    
    print(f"\nüîÑ –¢–ï–°–¢ –û–ë–†–ê–¢–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        from sync.reverse_sync import UnifiedReverseSync
        
        reverse = UnifiedReverseSync()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        updates = reverse.get_pending_updates()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(updates)} –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Bitrix")
        
        if updates:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
            results = reverse.sync_batch_updates(max_orders=3)
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results}")
            return True
        else:
            print("‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    
    print("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    tests_passed = 0
    total_tests = 3
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    if await test_full_cycle():
        tests_passed += 1
        
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if await test_sync_performance():
        tests_passed += 1
        
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    if await test_reverse_sync():
        tests_passed += 1
    
    print("\n" + "=" * 60)
    print(f"üéØ –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {tests_passed/total_tests*100:.1f}%")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    asyncio.run(main())