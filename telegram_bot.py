#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É Bitrix –∏ Supabase
"""

import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from supabase import create_client
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CvetyTelegramBot:
    """Telegram Bot –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.application = None
        self.supabase = None
        
        if config.SUPABASE_URL and config.SUPABASE_ANON_KEY:
            self.supabase = create_client(config.SUPABASE_URL, config.SUPABASE_ANON_KEY)
        else:
            logger.error("Supabase credentials not found")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        try:
            if not self.supabase:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = self.supabase.table('telegram_users')\
                .select('*')\
                .eq('chat_id', chat_id)\
                .execute()
            
            if existing_user.data:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.supabase.table('telegram_users')\
                    .update({
                        'is_active': True,
                        'last_activity': datetime.utcnow().isoformat(),
                        'username': user.username,
                        'first_name': user.first_name,
                        'last_name': user.last_name
                    })\
                    .eq('chat_id', chat_id)\
                    .execute()
                
                await update.message.reply_text(
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name}!\n\n"
                    "‚úÖ –í—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤.\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n"
                    "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                    "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.supabase.table('telegram_users').insert({
                    'chat_id': chat_id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'is_active': True,
                    'role': 'viewer',
                    'notification_level': 'all'
                }).execute()
                
                await update.message.reply_text(
                    f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                    "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç–∞ @Dflowersbot –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É Bitrix –∏ Supabase.\n\n"
                    "üì¶ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
                    "‚Ä¢ –ù–æ–≤—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
                    "‚Ä¢ –û—à–∏–±–∫–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n"
                    "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                    "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                )
            
            logger.info(f"User {user.first_name} ({chat_id}) registered/reactivated")
            
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stop - –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        try:
            if not self.supabase:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = self.supabase.table('telegram_users')\
                .update({'is_active': False})\
                .eq('chat_id', chat_id)\
                .execute()
            
            if result.data:
                await update.message.reply_text(
                    f"üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user.first_name}!\n\n"
                    "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n"
                    "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )
                logger.info(f"User {user.first_name} ({chat_id}) deactivated")
            else:
                await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
                
        except Exception as e:
            logger.error(f"Error in stop_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            await update.message.reply_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...")
            
            if not self.supabase:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤
            products_count = self.supabase.table('products')\
                .select('id', count='exact')\
                .eq('is_active', True)\
                .execute()
            
            orders_count = self.supabase.table('orders')\
                .select('id', count='exact')\
                .execute()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–∫–∞–∑–∞
            recent_orders = self.supabase.table('orders')\
                .select('id, total_amount, status, created_at')\
                .order('created_at', desc=True)\
                .limit(3)\
                .execute()
            
            status_message = f"üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Cvety.kz**\n\n"
            status_message += f"üõç **–¢–æ–≤–∞—Ä—ã:** {products_count.count:,} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
            status_message += f"üì¶ **–ó–∞–∫–∞–∑—ã:** {orders_count.count:,} –≤—Å–µ–≥–æ\n\n"
            
            if recent_orders.data:
                status_message += "üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:**\n"
                for order in recent_orders.data:
                    order_date = datetime.fromisoformat(order['created_at'].replace('Z', '+00:00'))
                    status_message += f"‚Ä¢ #{order['id'][:8]} - {order['total_amount']:,.0f}‚Ç∏ - {order['status']}\n"
            
            status_message += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            
            await update.message.reply_text(status_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in status_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            await update.message.reply_text("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            if not self.supabase:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            today_start = f"{today}T00:00:00Z"
            
            # –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            orders_today = self.supabase.table('orders')\
                .select('id, total_amount', count='exact')\
                .gte('created_at', today_start)\
                .execute()
            
            # –¢–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            products_updated = self.supabase.table('products')\
                .select('id', count='exact')\
                .gte('updated_at', today_start)\
                .execute()
            
            # –°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            total_amount = sum(float(order.get('total_amount', 0) or 0) for order in orders_today.data)
            
            stats_message = f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today.strftime('%d.%m.%Y')}**\n\n"
            stats_message += f"üì¶ **–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:** {orders_today.count}\n"
            stats_message += f"üí∞ **–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤:** {total_amount:,.0f} ‚Ç∏\n"
            stats_message += f"üõç **–¢–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:** {products_updated.count}\n"
            
            if orders_today.count > 0:
                avg_order = total_amount / orders_today.count
                stats_message += f"üìä **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** {avg_order:,.0f} ‚Ç∏\n"
            
            stats_message += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            
            await update.message.reply_text(stats_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in stats_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        chat_id = update.effective_chat.id
        
        try:
            if not self.supabase:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            user_check = self.supabase.table('telegram_users')\
                .select('role')\
                .eq('chat_id', chat_id)\
                .execute()
            
            if not user_check.data or user_check.data[0].get('role') != 'admin':
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = self.supabase.table('telegram_users')\
                .select('chat_id, username, first_name, role, created_at')\
                .eq('is_active', True)\
                .order('created_at', desc=False)\
                .execute()
            
            if not active_users.data:
                await update.message.reply_text("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
                return
            
            users_message = f"üë• **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(active_users.data)}):**\n\n"
            
            for user in active_users.data:
                username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                role_emoji = "üëë" if user['role'] == 'admin' else "üë§"
                created = datetime.fromisoformat(user['created_at'].replace('Z', '+00:00'))
                
                users_message += f"{role_emoji} {user['first_name']} ({username})\n"
                users_message += f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {created.strftime('%d.%m.%Y')}\n\n"
            
            await update.message.reply_text(users_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in users_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å"""
        help_message = (
            "ü§ñ **–ë–æ—Ç Cvety.kz - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            "/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n"
            "üì¶ –ù–æ–≤—ã–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
            "üõç –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚ö†Ô∏è –û—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("stop", self.stop_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("users", self.users_command))
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not config.TELEGRAM_BOT_TOKEN:
            logger.error("TELEGRAM_BOT_TOKEN not found in environment")
            return
        
        logger.info("Starting Telegram bot...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("Telegram bot started successfully!")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("Bot stopping...")
        finally:
            await self.application.stop()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = None

def get_bot():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot_instance
    if bot_instance is None:
        bot_instance = CvetyTelegramBot()
    return bot_instance

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    bot = CvetyTelegramBot()
    asyncio.run(bot.start_bot())