#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bitrix_order_id –≤ Supabase
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Bitrix –ø–æ–ª–µ bitrix_order_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.
"""

import requests
import json
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_URL = "http://localhost:8001/webhooks/bitrix/order"
WEBHOOK_TOKEN = "fad5fbe4c8a520cf6d5453685b758c7fd9f6681f084be335fcdcd190ad9aaa0e"

def test_bitrix_id_update():
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ bitrix_order_id"""
    timestamp = int(time.time())
    test_order_id = timestamp + 960000  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    test_user_id = timestamp + 110000
    
    payload = {
        "event": "order.create",
        "token": WEBHOOK_TOKEN,
        "data": {
            "ID": str(test_order_id),
            "ACCOUNT_NUMBER": str(test_order_id),
            "STATUS_ID": "N",
            "PRICE": "8000.0000",
            "PRICE_DELIVERY": "1500.0000",
            "USER_ID": str(test_user_id),
            "PAYED": "N",
            "DATE_INSERT": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "PAY_SYSTEM_ID": "10",
            "USER_DESCRIPTION": "–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bitrix_order_id –≤ Supabase",
            "properties": {
                "phone": "+77777777999",
                "email": "bitrix_id_test@example.com",
                "nameRecipient": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –î–ª—è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è bitrix_order_id",
                "phoneRecipient": "+77777777998",
                "addressRecipient": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è bitrix_order_id, —É–ª. ID –¢–µ—Å—Ç, –¥. 10",
                "data": "2025-08-24",
                "postcardText": "üîó –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bitrix_order_id",
                "city": "2",
                "when": "29",
                "SOURCE_ORDER": "bitrix_id_test",
                "shopId": "17008"
            },
            "basket": [
                {
                    "ID": f"{test_order_id}1",
                    "PRODUCT_ID": "595099",
                    "NAME": "–¢–µ—Å—Ç–æ–≤—ã–π –±—É–∫–µ—Ç –¥–ª—è bitrix_order_id",
                    "PRICE": "8000.0000",
                    "QUANTITY": "1.0000",
                    "CURRENCY": "KZT"
                }
            ],
            "user": {
                "ID": str(test_user_id),
                "phone": "+77777777999",
                "email": "bitrix_id_test@example.com"
            },
            "webhook_source": "bitrix_id_test",  # –ù–ï production_real - –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            "webhook_timestamp": datetime.now().isoformat()
        }
    }
    
    print("üîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø BITRIX_ORDER_ID")
    print("=" * 55)
    print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {test_order_id} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è bitrix_order_id...")
    print(f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {payload['data']['properties']['nameRecipient']}")
    print(f"üí∞ –°—É–º–º–∞: {payload['data']['PRICE']} KZT")
    print(f"üîÑ Webhook source: {payload['data']['webhook_source']} (–∑–∞–ø—É—Å—Ç–∏—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é)")
    print("")
    
    try:
        response = requests.post(
            WEBHOOK_URL,
            json=payload,
            headers={'Content-Type': 'application/json'},
            timeout=45  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:")
            print(f"   ‚Ä¢ Status: {result.get('status')}")
            print(f"   ‚Ä¢ Action: {result.get('action')}")
            print(f"   ‚Ä¢ Supabase Order ID: {result.get('order_id')}")
            print("")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (10 —Å–µ–∫—É–Ω–¥)...")
            time.sleep(10)
            
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            print("   1. –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –≤ Supabase")
            print("   2. –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –≤ Bitrix —á–µ—Ä–µ–∑ PHP API")
            print("   3. bitrix_order_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase")
            print("")
            print("üìã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ FastAPI –ª–æ–≥–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '‚úÖ Reverse sync completed'")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Supabase —Ç–∞–±–ª–∏—Ü—É orders –Ω–∞ –Ω–∞–ª–∏—á–∏–µ bitrix_order_id")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Bitrix –ª–æ–≥–∏: ssh root@185.125.90.141 'tail -10 /tmp/api_order_create.log'")
            print("")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bitrix_order_id...")
    print("    –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ bitrix_order_id –≤ Supabase\\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FastAPI
    try:
        response = requests.get("http://localhost:8001/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ HTTP 200")
    except:
        print("‚ùå FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ localhost:8001")
        return
    
    success = test_bitrix_id_update()
    
    if success:
        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤:")
        print("   ‚Ä¢ FastAPI –ª–æ–≥–∞—Ö")
        print("   ‚Ä¢ Supabase console (–±–∏—Ç—Ä–∏–∫—Å_order_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω)")
        print("   ‚Ä¢ Bitrix –ª–æ–≥–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")

if __name__ == "__main__":
    main()